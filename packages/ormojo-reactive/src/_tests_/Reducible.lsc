import { expect } from 'chai'
import { Observable } from 'rxjs/Observable'
import 'rxjs/add/observable/of'
import 'rxjs/add/observable/from'
import { Subject } from 'rxjs/Subject'
import testObservable from 'observable-utils/lib/test'

import { Reducible } from '..'

describe('Reducible', ->
  class Payloader extends Reducible:
    reduce(action) ->
      this.payload = action.payload
      Object.assign({}, action, {payload: action.payload + 1})

    actionFilter(action) ->
      if action?.type == 'FILTER_ME_OUT': false else: true

  it('should reduce its own state properly', ->
    pl = new Payloader
    pl.connectAfter(Observable.of({
      type: 'ACTION'
      payload: 5
    }))
    expect(pl.payload).to.equal(5)
  )

  it('should polymorph and filter action', ->
    pl = new Payloader
    inj = new Subject
    pl.connectAfter(inj)
    inj.next({ type: 'FILTER_ME_OUT', payload: 5})
    expect(pl.payload).to.not.be.ok
    testObservable(pl, null, [ (x) -> x.payload == 6 ])
    inj.next({ type: 'ACTION', payload: 5 })
    expect(pl.payload).to.equal(5)
  )

  it('should chain', ->
    pl1 = new Payloader
    pl2 = new Payloader
    inj = new Subject
    pl1.connectAfter(inj)
    pl2.connectAfter(pl1)
    inj.next({ type: 'ACTION', payload: 5 })
    expect(pl2.payload).to.equal(6)
  )
)
