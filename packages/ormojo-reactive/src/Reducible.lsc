import createSubject from 'observable-utils/lib/createSubject'

// Reducibles are a fundamental unit of composition in reactive component
// chains within ormojo. They receive objects called "actions", which have
// the following standard shape (pattered on Flux Standard Actions):
//
// {
//		type: <String>
//   payload: <Value>
//   meta: <Object>
// }
//
// Upon receiving an action, a Reducible invokes a member function called
// this.reduce(action) -- a so-called "reducer." The reducer optionally
// mutates some internal state of the reducible, optionally transforms the
// action into another action, and then returns the action, which is passed
// down the observable chain.
export default class Reducible:
  constructor() ->
    subject = createSubject()
    this.subscribe = subject.subscribe
    this.error = subject.error
    this.complete = subject.complete
    this._internalNext = subject.next

  ////// istanbul ignore next //////

  // Reducer function. Given an action, it (optionally) performs an appropriate
  // operation on the internal state of the reducer, (optionally) transforms
  // the action to a new action, then returns the transformed action, which
  // is passed on to the observer chain.
  //
  // A reducer MUST return an action -- usually you will want to return
  // the same action passed in.
  reduce(action) -> action

  next(action) ->
    // If our reducer isn't interested in the action, pass it through unmodified.
    if not this.actionFilter(action): return this._internalNext(action)
    // Reduce by the action, then pass the result down the observable chain.
    this._internalNext(this.reduce(action))

  // Helper function to connect this reducer after an observable. Equivalent to
  // observable.subscribe(this)
  connectAfter(observable) -> observable.subscribe(this)

  // Entity filter function - used by the reducer to determine which entities
  // should be acted upon.
  filter(entity) -> true

  // Action filter function - used prior to the reducer call to determine
  // whether an incoming action object should be fed to the reducer or passed
  // through unmodified.
  actionFilter(action) -> true
