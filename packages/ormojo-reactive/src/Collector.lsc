import Reducible from './Reducible'

export default class Collector extends Reducible:
  constructor() ->
    super()
    this.reset()

  reset() ->
    this.byId = Object.create(null)

  // The Updater is called every time the entities in the Collector's internal
  // store are changed. Use this opportunity to, e.g., sort the data.
  updater() -> return

  // Implement Store interface
  has(id) -> id in this.byId
  getById(id) -> this.byId[id]
  forEach(func) ->
    for key k, val v in this.byId: func(v,k)
  // Implement SynchronousStore
  set(id, val) -> this.byId[id] = val
  remove(id) -> delete this.byId[id]

  // Default hydration implementation just fetches the entity, presumably
  // already hydrated, from the anterior store. Overload to perform hydration
  // inside the collector.
  ////// istanbul ignore next //////
  willCreateEntity(store, entity) ->
    store.getById(entity.id) or entity
  ////// istanbul ignore next //////
  willUpdateEntity(store, previousEntity, entity) ->
    store.getById(entity.id)
  ////// istanbul ignore next //////
  /* eslint-disable no-unused-vars */
  willDeleteEntity(store, entity) -> return
  /* eslint-enable no-unused-vars */

  _createAction(store, entity) ->
    storedEntity = this.willCreateEntity(store, entity)
    if (not this.filter(storedEntity)): return
    if not this.has(storedEntity.id):
      this.set(storedEntity.id, storedEntity)
    this.dirty = true

  _updateAction(store, entity) ->
    // If the entity is within our store...
    previousEntity = this.getById(entity.id)
    if (previousEntity != undefined):
      // Re-up and reapply the filter
      nextEntity = this.willUpdateEntity(store, previousEntity, entity)
      if this.filter(nextEntity):
        this.set(entity.id, nextEntity)
        this.dirty = true
      else:
        return this._deleteAction(store, entity)
    else:
      // Not in the store, do a create action
      return this._createAction(store, entity)

  _deleteAction(store, entity) ->
    id = entity.id
    if this.has(id):
      this.willDeleteEntity(store, this.byId[id])
      this.remove(id)
      this.dirty = true

  // Update and delete extant entities, based on values from a store.
  _diffUpdateDelete(store) ->
    // For each extant entity..
    this.forEach((v,k) =>
      // If it exists on the remote store...
      nextEntity = store.getById(k)
      if nextEntity:
        // Process as an update.
        this._updateAction(store, nextEntity)
      else:
        // Remove from local store
        this._deleteAction(store, v)
    )

  // Create missing entities that exist on the store, but not this collector.
  _diffCreate(store) ->
    store.forEach((v, k) =>
      if not this.has(k): this._createAction(store, v)
    )

  _resetAction(store) ->
    this.dirty = true
    if store:
      // Diff store against self.
      this._diffUpdateDelete(store)
      this._diffCreate(store)
    else:
      // Total wipeout
      for key k, val v in this.byId:
        this.willDeleteEntity(null, v)
        this.remove(k)

  augmentAction(action) -> ({
    type: action.type
    meta: Object.assign({}, action.meta, { store: this })
    payload: action.payload
    error: action.error
  })

  reduce(action) ->
    // Pass erroneous actions without checking
    if action.error: return action

    // A collector may optionally be connected after another Store, in which case
    // it obtains its values from that store.
    store = action.meta?.store or this

    if action.type == 'CREATE':
      for elem entity in action.payload: this._createAction(store, entity)
    elif action.type == 'UPDATE':
      for elem entity in action.payload: this._updateAction(store, entity)
    elif action.type == 'DELETE':
      for elem entity in action.payload: this._deleteAction(store, entity)
    elif action.type == 'RESET':
      // Reset from anterior store. If no anterior store, reset to blank state.
      this._resetAction(action.meta?.store)
    else:
      return action

    if this.dirty: this.updater(action); this.dirty = false
    this.augmentAction(action)
