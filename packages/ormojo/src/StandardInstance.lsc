import BoundInstance from './BoundInstance'

// Attaches properties to the instance class prototype so that dot-access to
// declared model fields automatically calls getters as needed.
export applyModelPropsToInstanceClass(boundModel, clazz) ->
  for key k, val v in boundModel.instanceProps:
    if v:
      Object.defineProperty(clazz.prototype, k, {
        enumerable: true, configurable: true
        get: -> this.get(k)
        set: (val) -> this.set(k, val)
      })
  clazz

// Creates a standard `BoundInstance` class for the given `BoundModel`
export createStandardInstanceClassForBoundModel(bm) ->
  class StandardInstance extends BoundInstance {}

  // Create getters and setters
  applyModelPropsToInstanceClass(bm, StandardInstance)
