import cuid from 'cuid'
import { Backend, BoundModel, createStandardInstanceClassForBoundModel, Store, Query, Hydrator, ResultSet } from '../..'

class TestStore extends Store:
  constructor(...args) ->
    super(...args)
    this.storage = Object.create(null)

  crupsert(data, isCreate) ->
    this.corpus.Promise.resolve().then(=>
      [for elem datum in data:
        if not datum: throw new Error("invalid create format")
        if not datum.id: datum.id = cuid()
        if isCreate and this.storage[datum.id]: throw new Error("duplicate id")
        this.storage[datum.id] = Object.assign({}, this.storage[datum.id], datum)
      ]
    )

  read(query) ->
    this.corpus.Promise.resolve().then(=>
      if not query?.ids: throw new Error("invalid query format")
      new ResultSet( [ for elem id in query.ids: this.storage[id] ] )
    )

  create(data) ->
    this.crupsert(data, true)

  update(data) ->
    this.corpus.Promise.resolve().then(=>
      [for elem datum in data:
        if not datum?.id: throw new Error("invalid update format")
        if not this.storage[datum.id]: throw new Error("update of nonexistent object")
        this.storage[datum.id] = datum
        datum
      ]
    )

  upsert(data) ->
    this.crupsert(data, false)

  delete(data) ->
    this.corpus.Promise.resolve().then(=>
      [for elem datum in data:
        if not datum: throw new Error("invalid delete format")
        if this.storage[datum]:
          delete this.storage[datum]
          true
        else:
          false
      ]
    )

class TestBoundModel extends BoundModel:
  constructor(model, backend, bindingOptions) ->
    super(model, backend, bindingOptions)
    this.store = new TestStore({corpus: this.corpus, backend})
    this.hydrator = new Hydrator({boundModel: this})
    backend.storage[this.name] = this.storage

class TestBackend extends Backend:
  constructor() ->
    super()
    this.storage = {}

  bindModel(model, bindingOptions) ->
    if not this.storage[model.name]: this.storage[model.name] = {}
    m = new TestBoundModel(model, this, bindingOptions)
    m.instanceClass = createStandardInstanceClassForBoundModel(m)
    m

  createQuery() ->
    new Query

module.exports = TestBackend
