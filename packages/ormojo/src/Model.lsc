import Field from './Field'

// Declarative representation of a model.
export default class Model:
  // Constructor should only be called by `Corpus.createModel()`.
  // @private
  // @see Corpus//createModel
  constructor(corpus, spec) ->
    this.corpus = corpus
    this.spec = spec
    this.name = this.spec.name

  // @private
  _forBackend(backend, bindingOptions) -> backend.bindModel(this, bindingOptions)

  // Bind this model to the backend in the `Corpus` with the given name.
  //
  // @param backendName [String] Name of a valid backend in the `Corpus` containing this model.
  // @return [BoundModel] A BoundModel tying this model to the given backend.
  forBackend(backendName, bindingOptions) ->
    this._forBackend(this.corpus.getBackend(backendName), bindingOptions)

  // Check this model for errors and throw them.
  _checkAndThrow() ->
    if not this.spec: throw new Error('Model has no spec')
    if not this.spec.fields: throw new Error('Model must define at least one field')
    // Create nonce field objects - these will throw if the field is invalid.
    for key k, val fieldSpec in this.spec.fields:
      new Field().fromSpec(k, fieldSpec)
