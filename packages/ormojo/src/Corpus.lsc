import Model from './Model'
import Backend from './Backend'

// A collection of models connected to a collection of backends.
export default class Corpus:
  // Create a new `Corpus`
  //
  // @param config [Object] Configuration data.
  // @option config [Object] promise Promise implementation to use internally. By default, uses whatever Promise implementation is installed in the global Promise variable. The object is of the form ```js { reject, resolve, all }```
  // @option config [Object<String, Backend>] backends A hash of named backends available to this Corpus.
  // @option config [Object] log A bunyan-style logger object of the form ```js {trace, debug, info, warn, error, fatal}```. All ormojo logging will be directed through this object. *NB* Trace-level logging is extremely verbose!
  constructor(config = {}) ->
    this.config = config
    // Export methods to make promises.
    this.Promise = this.config.Promise or {
      reject: (x) -> Promise.reject(x)
      resolve: (x) -> Promise.resolve(x)
      all: (x) -> Promise.all(x)
    }

    // Set up no-op logging functions if needed
    if this.config.log:
      this.log = this.config.log
    else:
      this.log = {
        trace: -> return
        debug: -> return
        info: -> return
        warn: -> return
        error: -> return
        fatal: -> return
      }

    this.models = {}

    // Get backends
    for key k, val v in this.config.backends or {}:
      this.registerBackend(k, v)

  // Create a model within this Corpus with the given spec.
  //
  // @param spec [Object] Specification object for the Model.
  createModel(spec) ->
    if not spec?.name: throw new Error('createModel: name must be specified')
    if this.models[spec.name]: throw new Error(`createModel: duplicate model name \`${spec.name}\``)

    m = new Model(this, spec)
    m._checkAndThrow()
    this.models[m.name] = m
    m

  // Get the `Model` with the given name.
  // @param name [String] Model name
  // @return [Model]
  getModel(name) -> this.models[name]

  // Get the `Backend` with the given name.
  // @param name [String] Backend name
  // @return [Backend]
  getBackend(name) ->
    if this.backends[name]: this.backends[name] else: throw new Error(`No such backend ${name}`)

  registerBackend(name, backend) ->
    if (!this.backends): this.backends = {}
    if this.backends[name]:
      throw new Error(`Duplicate backend \`${name}\``)
    if not (backend instanceof Backend):
      throw new Error(`Backend \`${name}\` is not an instance of ormojo.Backend`)

    this.backends[name] = backend
    backend._initialize(this, name)
