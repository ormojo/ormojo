// Mediates between raw Store data and hydrated BoundModel instances.
export default class Hydrator:
  constructor(opts) ->
    { boundModel, store } = opts
    this.boundModel = boundModel
    this.store = store
    this.backend = this.boundModel.backend
    this.corpus = this.boundModel.corpus

  // Given an optional Instance and data from `Store.read`, update the instance's
  // internal state appropriately. If no Instance is given, it should be created
  // from scratch.
  didRead(instance, data) ->
    if data == undefined: return undefined
    if instance:
      this.didUpdate(instance, data)
    else:
      this.boundModel.createInstance(data)

  // Given an Instance, return data values suitable for use with `Store.create`
  willCreate(instance) -> instance._getDataValues()

  // Given an Instance and data from Store.create, update the instance's
  // internal structure appropriately.
  didCreate(instance, data) ->
    this.didUpdate(instance, data)

  // Given an Instance, return data values suitable for use with `Store.update` or
  // `Store.upsert` which will upload the desired future state of the Instance to
  // the Store.
  willUpdate(instance) ->
    instance._getDataValues()

  // Given raw data from the store after a successful update, modify the
  // Instance appropriately.
  didUpdate(instance, data) ->
    if data != null and data != undefined:
      instance._setDataValues(data)
      instance._clearChanges()
    instance

  // Given an instance, return raw data that the Store can use to delete the
  // appropriate instance.
  willDelete(instance) ->
    instance.id

  // Given an instance successfully deleted by the Store, update its contents
  // appropriately
  didDelete(instance) ->
    instance.wasDeleted = true
    instance
