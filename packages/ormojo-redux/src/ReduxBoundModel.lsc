import { BoundModel, Store, ResultSet } from 'ormojo'
import ReduxInstance from './ReduxInstance'
import ReduxField from './ReduxField'
import ReduxHydrator from './ReduxHydrator'
import shallowEqual from 'nanotools/lib/shallowEqual'
import EntityStore from 'redux-components-essentials/lib/EntityStore'

class ReduxStore extends Store:
  constructor(opts) ->
    super(opts)
    { equalityTest } = opts
    Clazz = EntityStore((x) -> x.id, (x) -> x, equalityTest or shallowEqual)
    this.component = new Clazz

  crupsert(data, isCreate) ->
    this.corpus.Promise.resolve().then(=>
      for elem datum in data:
        if (not datum) or (datum.id == undefined) or (datum.id == null):
          throw new Error("invalid create format")
        if isCreate and this.component.state[datum.id]: throw new Error("duplicate id")

      if isCreate: this.component.create(data) else: this.component.update(data)
      stateNow = this.component.state
      [ for elem datum in data: stateNow[datum.id] ]
    )

  read(query) ->
    this.corpus.Promise.resolve().then(=>
      if not query?.ids: throw new Error("invalid query format")
      stateNow = this.component.state
      new ResultSet( [for elem id in query.ids: stateNow[id]] )
    )

  create(data) ->
    this.crupsert(data, true)

  update(data) ->
    this.corpus.Promise.resolve().then(=>
      stateNow = this.component.state
      for elem datum in data:
        if not datum?.id: throw new Error("invalid update format")
        if not stateNow[datum.id]: throw new Error("update of nonexistent object")

      this.component.update(data)
      stateAfter = this.component.state
      [for elem datum in data: stateAfter[datum.id]]
    )

  upsert(data) ->
    this.crupsert(data, false)

  delete(data) ->
    this.corpus.Promise.resolve().then(=>
      stateNow = this.component.state
      results = [for elem datum in data:
        if not datum: throw new Error("invalid delete format")
        if stateNow[datum]: true else: false
      ]
      this.component.delete(data)
      results
    )

export default class ReduxBoundModel extends BoundModel:
  constructor(model, backend, bindingOptions) ->
    super(model, backend, bindingOptions)
    this.store = new ReduxStore({corpus: this.corpus, equalityTest: this.spec.equalityTest})
    this.component = this.store.component
    this.hydrator = new ReduxHydrator({boundModel: this})

  _deriveFields() ->
    this.fields = {}
    for key k, val fieldSpec in this.spec.fields:
      f = new ReduxField().fromSpec(k, fieldSpec)
      this.fields[k] = f
    if not this.fields['id']:
      throw new Error("ReduxBoundModel: bound model derived from Model named `#{this.model.name}` must have an id field.")

  _deriveInstanceClass() ->
    return class extends ReduxInstance {}

  getReduxComponent() -> this.component
