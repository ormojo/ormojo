import { BoundModel, applyModelPropsToInstanceClass, Store, Hydrator, ResultSet } from 'ormojo'
import ReduxInstance from './ReduxInstance'
import cuid from 'cuid'
import { shallowDiff } from './Util'
import OrmojoStore from './OrmojoStore'

class ReduxStore extends Store:
  constructor(opts) ->
    super(opts)
    { equalityTest } = opts
    this.component = new OrmojoStore
    this.component.equalityTest = equalityTest

  crupsert(data, isCreate) ->
    this.corpus.Promise.resolve().then(=>
      for elem datum in data:
        if (not datum): throw new Error("invalid create format")
        if not datum.id: datum.id = cuid()
        if isCreate and this.component.state[datum.id]: throw new Error("duplicate id")
        datum
      if isCreate: this.component.create(data) else: this.component.update(data)
      stateNow = this.component.state
      [ for elem datum in data: stateNow[datum.id] ]
    )

  read(query) ->
    this.corpus.Promise.resolve().then(=>
      if not query?.ids: throw new Error("invalid query format")
      stateNow = this.component.state
      new ResultSet( [for elem id in query.ids: stateNow[id]] )
    )

  create(data) ->
    this.crupsert(data, true)

  update(data) ->
    this.corpus.Promise.resolve().then(=>
      stateNow = this.component.state
      for elem datum in data:
        if not datum?.id: throw new Error("invalid update format")
        if not stateNow[datum.id]: throw new Error("update of nonexistent object")
      this.component.update(data)

      stateAfter = this.component.state
      [for elem datum in data: stateAfter[datum.id]]
    )

  upsert(data) ->
    this.crupsert(data, false)

  delete(data) ->
    this.corpus.Promise.resolve().then(=>
      stateNow = this.component.state
      results = [for elem datum in data:
        if not datum: throw new Error("invalid delete format")
        if stateNow[datum]: true else: false
      ]
      this.component.delete(data)
      results
    )

export default class ReduxBoundModel extends BoundModel:
  constructor(model, backend, bindingOptions) ->
    super(model, backend, bindingOptions)
    equalityTest = this.spec.equalityTest or ( (a,b) -> not shallowDiff(a,b) )
    this.store = new ReduxStore({corpus: this.corpus, equalityTest})
    this.hydrator = new Hydrator({boundModel: this})

  initialize() ->
    this.instanceClass = applyModelPropsToInstanceClass(this, (class BoundReduxInstance extends ReduxInstance {}))

  getReduxComponent() -> this.store.component
