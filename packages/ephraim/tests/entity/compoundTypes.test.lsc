'use @oigroup/lightscript with flippedImports'

import '@ormojo/ephraim': {
  types, entity, field
}

{ required, typeOf } = types

test! "required primitive types", ->
  expect(required(types.any).validate({})).toBeTruthy()
  expect(required(types.any).validate(null)).toBeFalsy()
  expect(required(types.any).validate(undefined)).toBeFalsy()
  expect(required(types.number).validate(3)).toBeTruthy()
  expect(required(types.number).validate("")).toBeFalsy()
  expect(required(types.number).validate(null)).toBeFalsy()
  expect(required(types.string).validate("3")).toBeTruthy()
  expect(required(types.string).validate(3)).toBeFalsy()
  expect(required(types.string).validate(null)).toBeFalsy()
  expect(required(types.boolean).validate(true)).toBeTruthy()
  expect(required(types.boolean).validate(0)).toBeFalsy()
  expect(required(types.boolean).validate(null)).toBeFalsy()
  expect(required(types.object).validate({})).toBeTruthy()
  expect(required(types.object).validate([])).toBeFalsy()
  expect(required(types.object).validate(null)).toBeFalsy()
  expect(required(types.array).validate([])).toBeTruthy()
  expect(required(types.array).validate({})).toBeFalsy()
  expect(required(types.array).validate(null)).toBeFalsy()

test! "required entity types", ->
  @entity() class E:
    @field(types.string) str

  // validation
  e = new E
  expect(required(E).validate(null)).toBeFalsy()
  expect(required(E).validate({})).toBeFalsy()
  expect(required(E).validate(e)).toBeTruthy()

  // creation of required(E) is same as creation of E
  expect(typeOf(required(E).construct())).toBe(E)

  // required(E) is not a constructor
  expect!
    -> new (required(E))()
    .toThrow(TypeError)

test! "required primitive fields missing defaults", ->
  expect!
    ->
      @entity() class E:
        @field(required(types.string)) str
    .toThrow("Field 'str' of class 'E' is required, but no default value was provided.")

test! "required primitive fields defaults", ->
  @entity() class E:
    @field(required(types.number)) n = 1
    @field(required(types.string)) str = "hello"
    @field(required(types.array)) ary = []
    @field(required(types.object)) obj = {}
    @field(required(types.boolean)) bln = true

  e = new E
  console.log(e)

test! "required primitive fields setters", ->
  @entity() class E:
    @field(required(types.string)) str = "hello"

  e = new E()
  expect!
    -> e.str = null
    .toThrow("Value assigned to 'str' must be of type 'required(string)', was of type 'nil'")

  expect!
    -> e.str = 3
    .toThrow("Value assigned to 'str' must be of type 'required(string)', was of type 'number'")

test! "required entity fields", ->
  @entity() class E:
    @field() f = "default"

  @entity() class D:
    @field(required(E)) subE

  @entity() class F:
    @field() f = "defaultF"

  d = new D

  expect!
    -> d.subE = null
    .toThrow("Value assigned to 'subE' must be of type 'required(E)', was of type 'nil'")

  expect!
    -> d.subE = new F
    .toThrow("Value assigned to 'subE' must be of type 'required(E)', was of type 'F'")

  d.subE = new E
  console.log(d)
