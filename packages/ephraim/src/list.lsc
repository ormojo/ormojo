// A list of objects
// - Supports views/pagination
'use @oigroup/lightscript with flippedImports'

import './types': { Type, typeName, typeOf, typeFrom, __setType }

typeCheck(T, ...vals) ->
  for elem val in vals:
    if val~looseEq(null) or (not T.validate(val)):
      throw new Error(`Element added to list must be of type '${typeName(T)}', was of type '${typeOf(val).name}'`)

class List:
  constructor(ListT) ->
    this~__setType(ListT)
    this.elementType = ListT.elementType
    this.__data = []

  // Add entries to the end of the list
  push(...entries): void ->
    typeCheck(this.__elementType, entries)
    this.__data.push(...entries)

  // Add entries to the start of the list
  unshift(...entries): void ->
    typeCheck(this.__elementType, entries)
    this.__data.unshift(...entries)

  // Insert/delet entries at arbitrary point
  splice(i, n, ...entries): void ->
    typeCheck(this.__elementType, entries)
    this.__data.splice(i, n, ...entries)

  // Iterate the list
  forEach(callback, thisArg): void ->
    this.__data.foreach(callback, thisArg)

  // Get ith entry
  get(i) ->
    this.__data[i]

  // Set ith entry
  set(i, val): void ->
    typeCheck(this.__elementType, val)
    this.__data[i] = val

class ListType extends Type:
  constructor(elementType) ->
    this.elementType = elementType
    this.name = `listOf(${elementType~typeName!})`

  construct() ->
    new List(this)

  validate(x) ->
    x~looseEq(null) or (
      (x instanceof List)
      and (x.__elementType.isKindOf(this.__elementType))
    )

export listOf(T) ->
  now T = typeFrom(T)
  listT = new ListType(T)
  listT
