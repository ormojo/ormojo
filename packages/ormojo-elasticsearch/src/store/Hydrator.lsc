import { Hydrator, Util } from 'ormojo'

// Move between Elasticsearch Json API and ormojo instances.
export default class ESHydrator extends Hydrator:
  // Get ES API data for an instance.
  getDataForInstance(instance, dvs) ->
    rst = {
      index: instance._index or this.boundModel.getIndex()
      type: instance._type or this.boundModel.getDefaultType()
      data: dvs or instance._getDataValues()
    }
    if instance._parent: rst.parent = instance._parent
    if instance.id: rst.id = instance.id
    rst

  // Update an instance from an ES API return value.
  updateInstanceWithData(instance, esData) ->
    instance._setDataValues(esData._source)
    if esData._id: instance._id = esData._id
    if esData._index: instance._index = esData._index
    if esData._version: instance._version = esData._version
    if esData._type: instance._type = esData._type
    if esData._score: instance._score = esData._score
    if esData._routing: instance._routing = esData._routing
    if esData._parent: instance._parent = esData._parent
    instance._clearChanges()
    instance

  didRead(instance, data) ->
    if data == undefined: return undefined
    if instance:
      this.updateInstanceWithData(instance, data)
    else:
      now instance = this.boundModel.createInstance()
      this.updateInstanceWithData(instance, data)

  willCreate(instance) ->
    this.getDataForInstance(instance)

  didCreate(instance, data) ->
    this.updateInstanceWithData(instance, data)

  willUpdate(instance) ->
    delta = Util.getDelta(instance)
    if not delta: return undefined
    this.getDataForInstance(instance, delta)

  didUpdate(instance, deltaData) ->
    // The underlying Store returns the delta sent to Elasticsearch as the _source field.
    instance._mergeDataValues(deltaData._source)
    // Re-apply the post-merge data values
    deltaData._source = instance.dataValues
    this.updateInstanceWithData(instance, deltaData)

  willDelete(instance) ->
    this.getDataForInstance(instance)
