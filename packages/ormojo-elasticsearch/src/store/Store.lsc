import { Store as OrmojoStore } from 'ormojo'
import ESResultSet from '../ESResultSet'

export default class Store extends OrmojoStore:
  constructor(opts) ->
    super(opts)
    { defaultIndex, defaultType } = opts
    this.defaultIndex = defaultIndex
    this.defaultType = defaultType
    this.api = this.backend.api

  createOne(data) ->
    // Store dataValues that we used to create the instance.
    createdValues = data.data
    this.api.create(data.index, data.type, data.data, data.id, data.parent)
    .then (res) ->
      // Elasticsearch does not return the new values; pull them from the original doc.
      res._source = createdValues
      res

  updateOne(data) ->
    if not data:
      this.corpus.Promise.resolve(null)
    else:
      updateData = data.data
      this.api.update(data.index, data.type, data.id, updateData, data.parent)
      .then((res) ->
        // Return the delta-values we updated with...
        res._source = updateData
        res
      )

  crupsert(data, isCreate) ->
    // XXX: use Bulk API here.
    promises = [for elem datum in data:
      if not datum: throw new Error("invalid create format")
      if isCreate: this.createOne(datum) else: this.updateOne(datum)
    ]
    this.corpus.Promise.all(promises)

  read(query) ->
    ids = query?.ids
    let body
    if ids:
      if ids.length == 0:
        this.corpus.Promise.resolve([])
      else if ids.length == 1:
        // Elasticsearch GET
        this.api.findById(query.index, query.type, ids[0], query.parent)
        .then((rst) ->
          if not rst.found: new ESResultSet([]) else: new ESResultSet([ rst ])
        )
      else:
        // Elasticsearch MGET
        opts = if query.parent: ({ routing: query.parent })
        this.api.findByIds(query.index, query.type, ids, opts)
        .then((rst) ->
          entities = [for elem entity in (rst?.docs or []):
            if not (entity?.found): undefined else: entity
          ]
          new ESResultSet(entities)
        )
    else if (now body = query?.getQueryDsl()):
      // Elaticsearch SEARCH
      searchParams = { body }
      if query.offset: searchParams.from = query.offset
      if query.limit: searchParams.size = query.limit
      this.api.findRaw(query.index, query.type, searchParams)
      .then((rst) ->
        if (not rst) or (not rst.hits):
          new ESResultSet([], 0, 0, query, 0)
        else:
          new ESResultSet(rst.hits.hits, rst.hits.total, searchParams.from, query, rst.hits.max_score)
      )
    else:
      throw new Error("invalid query format")

  create(data) ->
    this.crupsert(data, true)

  update(data) ->
    promises = [for elem datum in data: this.updateOne(datum)]
    this.corpus.Promise.all(promises)

  upsert(data) ->
    this.crupsert(data, false)

  delete(data) ->
    promises = [for elem datum in data:
      if datum?.id:
        // Destroy given full object spec.
        this.api.destroy(datum.index, datum.type, datum.id, datum.parent)
      else:
        // Destroy given only ID.
        this.api.destroy(this.defaultIndex, this.defaultType, datum)
    ]
    this.corpus.Promise.all(promises)
