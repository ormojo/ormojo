import { expect } from 'chai'
import es_client from '../helpers/es_client'
import makeCorpus from '../helpers/makeCorpus'

describe('CRUD: ', ->
  it('should delete all indices from prior tests', ->
    es_client.indices.delete({
      index: ['widget_ormojo*', 'widget']
      ignore: [404]
    })
  )

  it('should create mapping', ->
    { corpus } = makeCorpus()
    mig = corpus.getBackend('main').getMigration()
    mig.prepare().then(-> mig.execute())
  )

  it('should create, save, find by id', ->
    { Widget } = makeCorpus()
    awidget = Widget.create()
    awidget.name = 'whosit'

    let testThing = null
    awidget.save()
    .then((thing) ->
      expect(thing.qty).to.equal(2)
      console.log('get:', thing.get())
      console.log('dataValues:', thing.dataValues)
      now testThing = thing
      Widget.findById(thing.id)
    ).then((anotherThing) ->
      console.log('get:', anotherThing.get())
      console.log('dataValues:', anotherThing.dataValues)
      expect(anotherThing.get()).to.deep.equal(testThing.get())
      Widget.findById([testThing.id])
    ).then((arrayOfThings) ->
      expect(arrayOfThings[0].get()).to.deep.equal(testThing.get())
    )
  )

  it('should create by specific id', ->
    { Widget } = makeCorpus()
    awidget = Widget.create()
    awidget.name = '12345'
    awidget.id = 12345

    awidget.save()
    .then(->
      Widget.findById(12345)
    ).then((rst) ->
      expect(rst.name).to.equal('12345')
    )
  )

  it('shouldnt find documents that arent there', ->
    { Widget } = makeCorpus()

    Widget.findById('nothere')
    .then((x) ->
      expect(x).to.equal(undefined)
      Widget.findById(['nothere', 'nowhere'])
    ).then((xs) ->
      expect(xs.length).to.equal(2)
      expect(xs[0]).to.equal(undefined)
      expect(xs[1]).to.equal(undefined)
    )
  )

  it('should save, delete, not find', ->
    { Widget } = makeCorpus()
    let id = null
    Widget.create({name: 'whatsit', qty: 1000000})
    .then((widg) ->
      now id = widg.id
      widg.destroy()
    ).then(->
      Widget.findById(id)
    ).then((x) ->
      expect(x).to.equal(undefined)
    )
  )
  
  it('should manage field deltas properly', ->
    { Widget } = makeCorpus()
    Widget.create({name: 'name1', qty: 1})
    .then((widg) ->
      expect(widg.changed()).to.equal(false)
      widg.name = 'name2'
      expect(widg.changed()).to.deep.equal(['name'])
      widg.save()
    ).then((widg) ->
      expect(widg.changed()).to.equal(false)
    )
  )

  it('should CRUD', ->
    { Widget } = makeCorpus()
    let id = null
    Widget.create({name: 'name1', qty: 1})
    .then((widg) ->
      Widget.findById(widg.id)
    ).then((widg) ->
      expect(widg.name).to.equal('name1')
      widg.name = 'name2'
      widg.save()
    ).then((widg) ->
      expect(widg.name).to.equal('name2')
      now id = widg.id
      widg.destroy()
    ).then(->
      Widget.findById(id)
    ).then((x) ->
      expect(x).to.equal(undefined)
    )
  )
)
