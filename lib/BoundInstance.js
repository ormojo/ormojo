// Generated by CoffeeScript 1.11.1
(function() {
  var BoundInstance, Instance, isPrimitive,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Instance = require('./Instance');

  isPrimitive = require('./Util').isPrimitive;

  BoundInstance = (function(superClass) {
    extend(BoundInstance, superClass);

    function BoundInstance(boundModel, dataValues) {
      this.dataValues = dataValues != null ? dataValues : {};
      BoundInstance.__super__.constructor.call(this, boundModel);
      this._previousDataValues = {};
    }

    BoundInstance.prototype.getDataValue = function(key) {
      return this.dataValues[key];
    };

    BoundInstance.prototype.setDataValue = function(key, value) {
      var originalValue;
      originalValue = this.dataValues[key];
      if ((!isPrimitive(value)) || (value !== originalValue)) {
        if (!(key in this._previousDataValues)) {
          this._previousDataValues[key] = originalValue;
        }
      }
      this.dataValues[key] = value;
      return void 0;
    };

    BoundInstance.prototype._clearChanges = function() {
      return this._previousDataValues = {};
    };

    BoundInstance.prototype.get = function(key) {
      var getter, k, values;
      if (key) {
        if (this.boundModel.instanceProps[key]) {
          if ((getter = this.boundModel.getters[key])) {
            return getter.call(this, key);
          } else {
            return this.getDataValue(key);
          }
        }
      } else {
        values = {};
        for (k in this.boundModel.instanceProps) {
          values[k] = this.get(k);
        }
        return values;
      }
    };

    BoundInstance.prototype.set = function(key, value) {
      var k, setter, v;
      if (value !== void 0) {
        if (this.boundModel.instanceProps[key]) {
          if ((setter = this.boundModel.setters[key])) {
            return setter.call(this, key, value);
          } else {
            return this.setDataValue(key, value);
          }
        }
      } else {
        for (k in key) {
          v = key[k];
          if (this.boundModel.instanceProps[k]) {
            this.set(k, v);
          }
        }
        return void 0;
      }
    };

    BoundInstance.prototype.changed = function(key) {
      var changes;
      if (key) {
        if (key in this._previousDataValues) {
          return true;
        } else {
          return false;
        }
      } else {
        changes = (function() {
          var results;
          results = [];
          for (key in this.dataValues) {
            if (key in this._previousDataValues) {
              results.push(key);
            }
          }
          return results;
        }).call(this);
        if (changes.length > 0) {
          return changes;
        } else {
          return false;
        }
      }
    };

    BoundInstance.prototype.save = function() {
      return this.boundModel.backend.save(this, this.boundModel);
    };

    BoundInstance.prototype.destroy = function() {
      return this.boundModel.backend.destroy(this, this.boundModel);
    };

    return BoundInstance;

  })(Instance);

  module.exports = BoundInstance;

}).call(this);
