// Generated by CoffeeScript 1.11.1
(function() {
  var Backend, Corpus, Model;

  Model = require('./Model');

  Backend = require('./Backend');

  Corpus = (function() {
    function Corpus(config) {
      var k, ref, sz, v;
      this.config = config != null ? config : {};
      this.Promise = this.config.Promise || {
        reject: function(x) {
          return Promise.reject(x);
        },
        resolve: function(x) {
          return Promise.resolve(x);
        },
        all: function(x) {
          return Promise.all(x);
        }
      };
      if (this.config.log) {
        this.log = this.config.log;
      } else {
        this.log = {
          trace: function() {},
          debug: function() {},
          info: function() {},
          warn: function() {},
          error: function() {},
          fatal: function() {}
        };
      }
      this.models = {};
      this.backends = this.config.backends || {};
      sz = 0;
      ref = this.backends;
      for (k in ref) {
        v = ref[k];
        sz++;
        if (!(v instanceof Backend)) {
          throw new Error("Corpus: object at `" + k + "` is not a backend");
        }
        v._initialize(this, k);
      }
      if (sz === 0) {
        throw new Error("Corpus: must register at least one backend");
      }
    }

    Corpus.prototype.createModel = function(spec) {
      var m;
      if (!(spec != null ? spec.name : void 0)) {
        throw new Error('createModel: name must be specified');
      }
      if (this.models[spec.name]) {
        throw new Error("createModel: duplicate model name `" + spec.name + "`");
      }
      m = new Model(this, spec);
      this.models[m.name] = m;
      return m;
    };

    Corpus.prototype.getModel = function(name) {
      return this.models[name];
    };

    Corpus.prototype.getBackend = function(name) {
      if (this.backends[name]) {
        return this.backends[name];
      } else {
        throw new Error("No such backend " + name);
      }
    };

    return Corpus;

  })();

  module.exports = Corpus;

}).call(this);
