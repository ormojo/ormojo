import { toPlainObject } from '@ormojo/ephraim'
import { AsyncSink, SinkEntityAdapter } from '@ormojo/ormojo'
import { updateInstanceWithData } from './source'

export class ESSink extends AsyncSink:
  constructor(opts) ->
    super(opts)
    this.api = opts.api

  createOne(data, opts) ->
    // Store dataValues that we used to create the instance.
    createdValues = data.data
    this.api.create(data.index, data.type, data.data, data.id, data.parent, opts)
      .then((res) ->
        // Elasticsearch does not return the new values; pull them from the original doc.
        res._source = createdValues
        res
      )

  updateOne(data) ->
    if not data:
      Promise.resolve(null)
    else:
      updateData = data.data
      this.api.update(data.index, data.type, data.id, updateData, data.parent)
        .then((res) ->
          // Return the delta-values we updated with...
          res._source = updateData
          res
        )

  crupsert(data, isCreate, opts) ->
    // XXX: use Bulk API here.
    promises = [...for elem datum in data:
      if not datum: throw new Error("invalid create format")
      if isCreate: [this.createOne(datum, opts)] else: [this.updateOne(datum)]
    ]
    Promise.all(promises)

  create(data, opts) ->
    this.crupsert(data, true, opts)
    // if data.length == 1:
    // else:
    //   this._bulk([...for elem datum in data: [
    //     { index: {
    //       _index: datum.index
    //       _type: datum.type
    //       ...if datum.id: { _id: datum.id }
    //       ...if datum.parent: { _parent: datum.parent }
    //     } }
    //     datum.data
    //   ]])

  update(data) ->
    promises = [...for elem datum in data: [this.updateOne(datum)]]
    Promise.all(promises)

  upsert(data) ->
    this.crupsert(data, false)

  delete(data) ->
    // XXX: bulk api
    promises = [...for elem datum in data:
      [this.api.destroy(datum.index, datum.type, datum.id, datum.parent)]
    ]
    Promise.all(promises)

// Get ES API data for an instance.
getDataForInstance(instance, dvs) ->
  rst = {
    index: instance._index
    type: instance._type
    data: if dvs != undefined: dvs else: instance~toPlainObject()
  }
  if instance._parent: rst.parent = instance._parent
  if instance._id:
    rst.id = instance._id
  elif instance.id:
    rst.id = instance.id
  instance._isNewRecord = undefined
  rst

// Move between Elasticsearch Json API and Ephraim instances.
export class ESSinkEntityAdapter extends SinkEntityAdapter:
  willCreate(instance) ->
    getDataForInstance(instance)

  didCreate(instance, data) ->
    updateInstanceWithData(instance, data)

  willUpdate(instance) ->
    // xxx: support delta at some point
    // delta = getDelta(instance)
    // if not delta: return undefined
    //getDataForInstance(instance, delta)
    getDataForInstance(instance)

  didUpdate(instance, deltaData) ->
    // The underlying Store returns the delta sent to Elasticsearch as the _source field.
    // instance._mergeDataValues(deltaData._source)
    // // Re-apply the post-merge data values
    // deltaData._source = instance.dataValues
    delete deltaData._source
    updateInstanceWithData(instance)

  willDelete(instance) ->
    getDataForInstance(instance, null)
