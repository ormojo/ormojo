import { Query, Cursor, ResultSet } from '@ormojo/ormojo'
import { createNestedObject, QueryDsl } from './queryDsl'
import { hydrate } from './instances'

export class ESQuery extends Query:
  constructor(backend) ->
    super(backend)

  setType(T) ->
    super.setType(T)
    typeInfo = this.backend._getTypeInfo(T)
    this.index = typeInfo.index
    this.type = typeInfo.type
    this

  setIndexName(idx) ->
    this.index = this.backend.normalizeIndexName(idx)
    this

  setQueryDsl(body) ->
    if body instanceof QueryDsl:
      this.body = body.getBody()
    else:
      this.body = body
    this

  q(...args) ->
    if not this.body: this.body = Object.create(null)
    value = args.pop()
    createNestedObject(this.body, args, value)
    this

  setQuery(other) ->
    Object.assign(this, other)

  resumeFrom(cursor) ->
    this.setQuery(cursor.query)
    this.offset = cursor.offset
    this.limit = cursor.limit
    this

  // Get Elasticsearch Query DSL JSON for this query.
  getQueryDsl() ->
    this.body

export class ESCursor extends Cursor:
  constructor(query) ->
    super()
    this.query = query

  setFromOffset(offset, limit, total) ->
    this.offset = offset
    this.limit = limit
    this.total = total
    this

export class ESResultSet extends ResultSet:
  constructor(backend, data, total, offset, originalQuery, maxScore = 0) ->
    super(backend, data or [])
    this.maxScore = maxScore
    this.total = total or this.results.length
    nextOffset = (offset or 0) + this.results.length
    if nextOffset < this.total:
      this.cursor = new ESCursor(originalQuery).setFromOffset(nextOffset, this.results.length, this.total)

  getTotalResultCount() -> this.total

  getCursor() -> this.cursor

  getMaxScore() -> this.maxScore

  _hydrate(typeMap, defaultType, errorOnMissingType) ->
    backend = this.backend
    nextResults = [...for elem result in this.results:
      if result:
        x = hydrate(result, backend, typeMap, defaultType, errorOnMissingType)
        if x: [x]
      else:
        [undefined]
    ]
    this.results = nextResults
    this
