import { createMemoryDelta as create, assignPlainObject, clearDelta, toPlainObject, isa } from '@ormojo/ephraim'
import { setBackend, Timestamped } from '@ormojo/ormojo'

export _create(type, backend, skipInit) ->
  create(type, skipInit)~setBackend(backend)

export _createNew(type, backend) ->
  instance = create(type)~setBackend(backend)
  instance._isNewRecord = true
  instance

// Helper: Update an instance from an ES API return value.
// XXX: assign vs set...
export hydrateInstance(instance, esData) ->
  instance._isNewRecord = undefined
  if not esData:
    instance~clearDelta!
    return instance

  // Data
  if esData._id: instance.id = esData._id
  if esData._source:
    // Zip out orm_type
    orm_type = esData._source.orm_type
    delete esData._source.orm_type
    // TODO: smarter assignment here
    instance~assignPlainObject(esData._source)
    instance._type = orm_type
    instance~clearDelta!
  else:
    instance~clearDelta!

  // Metadata
  if esData._index: instance._index = esData._index
  if esData._seq_no:
    instance._occ = { seq_no: esData._seq_no, primary_term: esData._primary_term }
  if esData._score: instance._score = esData._score
  if esData._routing: instance._routing = esData._routing

  instance

resolveType(typeMap, defaultType, errorOnMissingType, datum) ->
  idx = datum._index
  ty = datum._source.orm_type
  if (not idx) or (not ty):
    if errorOnMissingType:
      // TODO: specific error class for this
      throw new Error("could not map Elasticsearch result to Ephraim type")
    else:
      return defaultType
  T = typeMap(idx, ty)
  if not T:
    if errorOnMissingType:
      throw new Error("could not map Elasticsearch result to Ephraim type")
    else:
      return defaultType
  T

export hydrate(esResult, backend, typeMap, defaultType, errorOnMissingType) ->
  T = resolveType(typeMap, defaultType, errorOnMissingType, esResult)
  if T:
    hydrateInstance(_create(T, backend, true), esResult)
  else:
    undefined

// Get data necessary to perform an ES bulk operation with the given instance
export getBulkDataForInstance(instance, opts) ->
  // Timestamp
  if (not opts?.noTimestamp) and instance~isa(Timestamped):
    if not instance.createdAt: instance.createdAt = new Date()
    instance.updatedAt = new Date()
  ob = instance~toPlainObject()
  ob.orm_type = instance._type
  delete ob.id // use Elasticsearch virtual id field
  ob
