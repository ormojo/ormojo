import ESBoundModel from './ESBoundModel'
import { Instance } from 'ormojo'

export default class ESChildModel extends ESBoundModel:
  constructor(...args) ->
    super(...args)
    this.parentBoundModel = this.spec.parentBoundModel
    if not (this.parentBoundModel instanceof ESBoundModel):
      throw new Error("ESChildModel(`#{this.name}`): parentBoundModel must be an ESBoundModel.")

  _checkParent(parent) ->
    if parent instanceof Instance:
      return parent.id
    else if (typeof(parent) == 'string' or typeof(parent) == 'number'):
      return parent.toString()
    else:
      throw new Error("ESChildModel(`#{this.name}`): must provide parent object or ID as first argument")

  findById(parent, id) ->
    if id == undefined:
      throw new Error("ESChildModel(`#{this.name}`): both parent and id must be provided")

    parentId = this._checkParent(parent)

    multiple = Array.isArray(id)
    query = this.createQuery().byId(id)
    query.parent = parentId
    this.findAll(query)
    .then((resultSet) ->
      if multiple:
        resultSet.getResults()
      else:
        (resultSet.getResults())[0]
    )

  destroyById(parent, id) ->
    if id == undefined:
      throw new Error("ESChildModel(`#{this.name}`): both parent and id must be provided")
    parentId = this._checkParent(parent)
    this.store.delete([ {id, parent: parentId, type: this.getDefaultType(), index: this.getIndex() } ])
    .then((rst) -> rst[0])

  create(parent, data) ->
    parentId = this._checkParent(parent)

    instance = this.createInstance()
    instance.isNewRecord = true
    instance._applyDefaults()
    instance._parent = parentId
    if data != undefined:
      instance.set(data)
      instance.save()
    else:
      instance

  generateMapping() ->
    m = super.generateMapping()
    m['_parent'] = { type: this.parentBoundModel.getDefaultType() }
    m['_routing'] = { required: true }
    m
