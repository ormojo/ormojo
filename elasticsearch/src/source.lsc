import { assignPlainObject } from '@ormojo/ephraim'
import { AsyncSource, SourceEntityAdapter } from '@ormojo/ormojo'
import { ESQuery, ESResultSet } from './query'

export class ESSource extends AsyncSource:
  constructor(opts) ->
    super(opts)
    this.api = opts.api

  readIdQuery(query: ESQuery): Promise<ESResultSet> ->
    ids = query.ids
    if ids.length == 0:
      Promise.resolve(new ESResultSet([]))
    else if ids.length == 1:
      // Elasticsearch GET
      this.api.findById(query.index, query.type, ids[0], query.parent)
        .then((rst) ->
          if not rst.found: new ESResultSet([]) else: new ESResultSet([ rst ])
        )
    else:
      // Elasticsearch MGET
      opts = if query.parent: ({ routing: query.parent })
      this.api.findByIds(query.index, query.type, ids, opts)
        .then((rst) ->
          entities = [...for elem entity in (rst?.docs or []):
            if not (entity?.found): [undefined] else: [entity]
          ]
          new ESResultSet(entities)
        )

  readFullQuery(query: ESQuery): Promise<ESResultSet> ->
    body = query.getQueryDsl()
    // Elaticsearch SEARCH apicall
    searchParams = { body }
    if query.offset: searchParams.from = query.offset
    if query.limit: searchParams.size = query.limit
    this.api.findRaw(query.index, query.type, searchParams)
      .then((rst) ->
        if (not rst) or (not rst.hits):
          new ESResultSet([], 0, 0, query, 0)
        else:
          new ESResultSet(rst.hits.hits, rst.hits.total, searchParams.from, query, rst.hits.max_score)
      )

  read(query: ESQuery): Promise<ESResultSet> ->
    if query.ids:
      this.readIdQuery(query)
    else:
      this.readFullQuery(query)

export class ESSourceEntityAdapter extends SourceEntityAdapter:
  didRead(instance, data) ->
    if data == undefined: return undefined
    updateInstanceWithData(instance, data)

// Update an instance from an ES API return value.
// XXX: assign vs set...
export updateInstanceWithData(instance, esData) ->
  if not esData: return instance

  // Data
  if esData._source:
    instance~assignPlainObject(esData._source)

  // Metadata
  if esData._id: instance.id = esData._id
  if esData._index: instance._index = esData._index
  if esData._version: instance._version = esData._version
  if esData._type: instance._type = esData._type
  if esData._score: instance._score = esData._score
  if esData._routing: instance._routing = esData._routing
  if esData._parent: instance._parent = esData._parent

  // XXX: clear delta here...
  //instance._clearChanges()
  instance
