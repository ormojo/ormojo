'use @oigroup/lightscript with noEnforcedSubscriptIndentation'
import { makeCorpus, cleanupCorpus } from '../makeCorpus'
import { save, destroy, getBackend } from '@ormojo/ormojo'
import { toPlainObject, hasChanges } from '@ormojo/ephraim'

let backend, Widget

beforeAll! ->
  now { backend, Widget } = makeCorpus('crud')
  mig = backend.createMigration()
  debugger
  mig.prepare().then(-> mig.execute())

afterAll! ->
  cleanupCorpus('crud')


test('should create, save, find by id', ->
  awidget = backend.create(Widget)
  awidget.name = "whosit"
  expect(awidget~hasChanges!).toBe(true)
  debugger
  awidget~save()
  .then! (widg) ->
    console.log("postSave", widg)
    expect(awidget~hasChanges!).toBe(false)
    debugger
    backend.findById(Widget, widg.id)
  .then! (widg) ->
    console.log(widg~toPlainObject!)
    expect(widg~toPlainObject!).toEqual(awidget~toPlainObject!)
    expect(widg~getBackend!).toBe(backend)
    backend.findById(Widget, [widg.id])
  .then! (widgs) ->
    console.log(widgs)
    expect(widgs[0]~toPlainObject!).toEqual(awidget~toPlainObject!)
)

test('should create, destroy by specific id', ->
  awidget = backend.create(Widget)
  awidget.name = '12345'
  debugger
  awidget.id = '12345'

  awidget~save()
  .then(->
    backend.findById(Widget, '12345')
  ).then((rst) ->
    console.log(rst~toPlainObject!)
    expect(rst.name).toBe('12345')
    backend.destroyById(Widget, '12345')
  ).then((rst) ->
    expect(rst).toBeTruthy()
    backend.findById(Widget, '12345')
  ).then((rst) ->
    expect(rst).toBe(undefined)
  )
)

test('shouldnt find documents that arent there', ->
  backend.findById(Widget, 'nothere')
  .then((x) ->
    expect(x).toBe(undefined)
    backend.findById(Widget, ['nothere', 'nowhere'])
  ).then((xs) ->
    expect(xs.length).toBe(2)
    expect(xs[0]).toBe(undefined)
    expect(xs[1]).toBe(undefined)
  )
)

test('should save, delete, not find', ->
  let id = null
  backend.create(Widget, {name: 'whatsit', qty: 1000000})
  .then((widg) ->
    now id = widg.id
    widg~destroy()
  ).then((widg) ->
    expect(widg._wasDeleted).toBe(true)
    backend.findById(Widget, id)
  ).then((x) ->
    expect(x).toBe(undefined)
  )
)

test('should CRUD', ->
  let id = null
  backend.create(Widget, {name: 'name1', qty: 1})
  .then((widg) ->
    expect(widg.name).toBe('name1')
    expect(widg.qty).toBe(1)
    backend.findById(Widget, widg.id)
  ).then((widg) ->
    expect(widg.name).toBe('name1')
    widg.name = 'name2'
    widg~save()
  ).then((widg) ->
    expect(widg.name).toBe('name2')
    now id = widg.id
    widg~destroy()
  ).then(->
    backend.findById(Widget, id)
  ).then((x) ->
    expect(x).toBe(undefined)
  )
)
