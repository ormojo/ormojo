'use @oigroup/lightscript with noEnforcedSubscriptIndentation'
import { makeCorpus, cleanupCorpus } from '../makeCorpus'
import { create, find, findAll } from '@ormojo/ormojo'
import { toPlainObject } from '@ormojo/ephraim'

let backend, Widget

beforeAll! ->
  now { backend, Widget } = makeCorpus('find')
  mig = backend.getMigration()
  mig.prepare().then(-> mig.execute())

afterAll! ->
  cleanupCorpus('find')

describe('find', ->

  it('should find', ->
    promises = [...for let i=0;i<10;i++:
      [Widget~create({name: `findAll ${i}`, tags: ['findAll'], qty: i}, { refresh: 'wait_for' })]
    ]
    promises.push(Widget~create({name: 'uniquely named thing', qty: 50}))
    Promise.all(promises).then! ->
      // wait for es indexing (todo: quorum query flag)
      new Promise( (resolve) -> setTimeout(resolve, 1000) )
    .then! ->
      // find one
      q = backend.createQuery().setType(Widget).setQueryDsl({
        query: { match: { name: 'uniquely' } }
      })
      backend~find(q)
    .then! (ent) ->
      console.log(ent)
      expect(ent.qty).toBe(50)
      // find nonexistent
      q = backend.createQuery().setType(Widget).setQueryDsl({
        query: { match: { name: 'frobozz' } }
      })
      backend~find(q)
    .then! (ent) ->
      expect(ent).toBe(undefined)
      // find many
      q = backend.createQuery().setType(Widget).setQueryDsl({
        query: { match: { tags: 'findAll' } }
      })
      backend~findAll(q)
    .then! (results) ->
      expect(results.getResultCount()).toBe(10)
      // pagination, first page
      q = backend.createQuery().setType(Widget).setLimit(3).setQueryDsl({
        query: { match: { tags: 'findAll' } }
        sort: { qty: 'asc' }
      })
      backend~findAll(q)
    .then! (results) ->
      expect(results.getResultCount()).toBe(3)
      expect(results.getResults()[0].qty).toBe(0)
      // pagination, next page
      // XXX: better api for this.
      q = backend.createQuery().resumeFrom(results.getCursor())
      backend~findAll(q)
    .then! (results) ->
      expect(results.getResultCount()).toBe(3)
      expect(results.getResults()[0].qty).toBe(3)
  )
)
