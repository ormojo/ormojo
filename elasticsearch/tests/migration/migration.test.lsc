'use @oigroup/lightscript with noEnforcedSubscriptIndentation'
import {  entity, field, types, listOf, Entity } from '@ormojo/ephraim'
import es_client from '../es_client'
import { ESBackend,QueryDsl } from '../..'

jest.setTimeout(10000)

@entity({
  name: 'widget'
  index: `widget_migration`
  type: `widget`
  filter: {
    autocomplete_filter: {
      type: 'edge_ngram',
      min_gram: 1,
      max_gram: 10
    }
  }
  analyzer: {
    autocomplete: {
      type: 'custom',
      tokenizer: 'standard',
      filter: [ 'lowercase', 'autocomplete_filter' ]
    }
  }
}) class Widget extends Entity:
  @field(types.string) id
  @field(types.string) name = 'nameless'
  @field(types.integer) qty = 2
  @field(types.date) timestamp
  @field({
    type: listOf(types.text)
  }) tags = []

@entity({name: 'Widget2'}) class Widget2 extends Widget {}

@entity({name: 'NuWidget'}) class NuWidget extends Widget:
  @field(types.string) extra

createBackend() ->
  logger = console.log.bind(console)
  new ESBackend(es_client, {
    log: { trace: logger }
  })

afterAll! -/>
  <- es_client.indices.delete({
    index: [`widget_migration*`]
  }, { ignore: [404] })
  return

let be, be2, be3

describe('migration tests: ', ->
  it('should have static migration plan', ->
    let id1, id2
    now be = createBackend()
    be.bind(Widget)
    mig = be.createMigration()
    mig.prepare()
    .then(->
      plan = mig.getMigrationPlan()
      console.dir(plan, { depth: 50 })
      // should need to create the index because it's absent
      expect(plan.parts[0].migrationStrategy).toBe('ADD_PHYSICAL_INDEX')
      mig.execute()
    )
    .then! ->
      be.create(Widget, {name: 'bob'}, {refresh: 'wait_for'})
    .then! (w1) ->
      now id1 = w1.id
      now be2 = createBackend()
      be2.bind(Widget2)
      mig2 = be2.createMigration()
      mig2.prepare()
    .then! (mig2) ->
      plan = mig2.getMigrationPlan!
      // console.dir(plan, { depth: 50 })
      expect(plan.parts[0].migrationStrategy).toBe('NOT_NEEDED')
      now be3 = createBackend()
      be3.bind(NuWidget)
      mig3 = be3.createMigration()
      mig3.prepare()
    .then! (mig3) ->
      plan = mig3.getMigrationPlan!
      // console.dir(plan, { depth: 50 })
      expect(plan.parts[0].migrationStrategy).toBe('ADD_PHYSICAL_INDEX')
      mig3.execute()
    .then! ->
      be3.create(NuWidget, {name: 'joe', extra: 'pickles'}, {refresh: 'wait_for'})
    .then! (w2) ->
      now id2 = w2.id
      // Check that data survived migration
      be3.findById(NuWidget, [id1, id2])
    .then! (results) ->
      expect(results?[0]?.name).toBe('bob')
      expect(results?[1]?.extra).toBe('pickles')
  )
)
