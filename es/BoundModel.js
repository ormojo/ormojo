// Generated by CoffeeScript 1.11.1
var BoundModel;

import mergeOptions from 'merge-options';

import Field from './Field';

export default BoundModel = function () {
  function BoundModel(model, backend, bindingOptions) {
    this.model = model;
    this.backend = backend;
    this.corpus = this.model.corpus;
    this.name = this.model.name;
    this.spec = mergeOptions(this.model.spec, bindingOptions || {});
    this._deriveFields();
    this._deriveProperties();
  }

  BoundModel.prototype._deriveFields = function () {
    var f, fieldSpec, k, ref;
    this.fields = {};
    ref = this.spec.fields;
    for (k in ref) {
      fieldSpec = ref[k];
      f = new Field().fromSpec(k, fieldSpec);
      this.fields[k] = f;
    }
    return void 0;
  };

  BoundModel.prototype._deriveProperties = function () {
    var field, k, ref, ref1, v;
    this.getters = {};
    this.setters = {};
    this.instanceProps = {};
    ref = this.fields;
    for (k in ref) {
      field = ref[k];
      this.getters[k] = field.get;
      this.setters[k] = field.set;
      this.instanceProps[k] = true;
    }
    ref1 = this.spec.properties || {};
    for (k in ref1) {
      v = ref1[k];
      if (!v) {
        delete this.instanceProps[k];
      } else {
        this.getters[k] = v.get;
        this.setters[k] = v.set;
        this.instanceProps[k] = true;
      }
    }
    return void 0;
  };

  BoundModel.prototype.getFields = function () {
    return this.fields;
  };

  BoundModel.prototype._createInstance = function (dataValues) {
    return new this.instanceClass(this, dataValues);
  };

  BoundModel.prototype.create = function (data) {
    var instance;
    instance = this._createInstance();
    instance.isNewRecord = true;
    instance.__applyDefaults();
    if (data !== void 0) {
      instance.set(data);
      return instance.save();
    } else {
      return instance;
    }
  };

  BoundModel.prototype.findById = function (id) {
    return this.backend.findById(this, id);
  };

  BoundModel.prototype.find = function (querySpec) {
    return this.backend.find(this, querySpec);
  };

  BoundModel.prototype.findAll = function (querySpec) {
    return this.backend.findAll(this, querySpec);
  };

  return BoundModel;
}();