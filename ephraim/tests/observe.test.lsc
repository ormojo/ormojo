import { entity, field, observe, toPlainObject, createMemory as create } from '@ormojo/ephraim'
import { test as testObservable } from '@ormojo/fobs'

test! 'observe', ->
  @entity({name: "E"}) class E:
    @field() f

  e = create(E)
  oe = observe(e)
  debugger
  sub = testObservable(oe.f, (ev, x) -> console.log(ev, x~toPlainObject!), [
    (x) -> x.f == undefined
    (x) -> x.f == 1
    (x) -> x.f == 2
    (x) -> x.f == 3
  ])
  e.f = 1
  e.f = 2
  e.f = 3
  e.f = 3
  sub.unsubscribe()

  expect(true).toBeTruthy!

test! 'observe child', ->
  @entity({name: "Child"}) class Child:
    @field() data

  @entity({name: "Parent"}) class Parent:
    @field(Child) child

  let storage
  p = create(Parent)
  op = observe(p)
  sub = testObservable(op.child, (ev, x) -> console.log(ev, x~toPlainObject!), [
    (x) -> x.child == undefined
    (x) -> now storage = x.child
    (x) -> x.child != storage
  ])
  child = create(Child)
  child.data = 1
  p.child = child
  p.child = create(Child)
  sub.unsubscribe()

  expect(true).toBeTruthy!
