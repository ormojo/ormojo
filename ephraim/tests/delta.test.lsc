import { entity, field, toPlainObject, createMemoryDelta as create, isDelta, hasChanges, clearDelta, fieldHasChanged, getChangedFieldKeys, rawSet, getPreviousValue, types, setPreviousValue, Entity } from '@ormojo/ephraim'

debugger

test! 'basic', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f = 0

  e = create(E)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  expect(e~getChangedFieldKeys!).toEqual([])
  expect(e~fieldHasChanged('f')).toBe(false)

  e.f = 1
  console.log("after field change", e)
  expect(e.f).toBe(1)
  expect(e~getPreviousValue('f')).toBe(0)
  expect(e~hasChanges!).toBe(true)
  expect(e~getChangedFieldKeys!).toEqual(['f'])
  expect(e~fieldHasChanged('f')).toBe(true)

  e~clearDelta()
  expect(e.f).toBe(1)
  expect(e~hasChanges!).toBe(false)
  console.log(e)

test! 'basic opaque', ->
  @entity({name: "E"}) class E extends Entity:
    @field(types.array) f = []
    @field(types.date) d

  e = create(E)
  console.log("opaque, initial", e)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  expect(e~getChangedFieldKeys!).toEqual([])
  expect(e~fieldHasChanged('f')).toBe(false)

  e.f.push(1)
  e.d = new Date()
  console.log("opaque, after field change", e)
  expect(e.f).toEqual([1])
  expect(e~getPreviousValue('f')).toEqual([])
  console.log("opaque, after inquiry", e)
  expect(e~hasChanges!).toBe(true)
  expect(e~getChangedFieldKeys!).toEqual(['f', 'd'])
  expect(e~fieldHasChanged('f')).toBe(true)

  e~clearDelta()
  console.log("opaque, after clearDelta",e)
  expect(e.f).toEqual([1])
  expect(e~hasChanges!).toBe(false)

test! 'opaque resets', ->
  @entity({name: "E"}) class E extends Entity:
    @field(types.array) f = []

  e = create(E)
  console.log("opaque, initial", e)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  expect(e~getChangedFieldKeys!).toEqual([])
  expect(e~fieldHasChanged('f')).toBe(false)

  e.f.push(1)
  console.log("opaque, after field change", e)
  expect(e.f).toEqual([1])
  expect(e~getPreviousValue('f')).toEqual([])
  expect(e~hasChanges!).toBe(true)
  console.log("opaque, after inquiry", e)

  e~setPreviousValue('f', [1])
  console.log('opaque, after setPrevousValue', e)
  expect(e.f).toEqual([1])
  expect(e~hasChanges!).toBe(false)

  e.f.push(2)
  expect(e.f).toEqual([1, 2])
  expect(e~hasChanges!).toBe(true)
  expect(e~getPreviousValue('f')).toEqual([1])
  e~rawSet('f', [])
  console.log('opaque, after rawSet', e)
  expect(e~hasChanges!).toBe(false)

test! 'primitive set previous value', ->
  @entity({name: "E"}) class E extends Entity:
    @field(types.integer) i = 1
    @field(types.array) f = []

  e = create(E)
  console.log("prim, initial", e)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  expect(e~getChangedFieldKeys!).toEqual([])

  e.f = [2]
  e~setPreviousValue('i', 5)
  console.log("prim, with delta, after set", e)
  expect(e~getChangedFieldKeys!).toEqual(['f'])
  expect(e.i).toEqual(5)

test! 'opaque set previous value', ->
  @entity({name: "E"}) class E extends Entity:
    @field(types.integer) i = 1
    @field(types.array) f = []

  e = create(E)
  console.log("opaque, initial", e)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  expect(e~getChangedFieldKeys!).toEqual([])

  e.i = 2
  e~setPreviousValue('f', [5])
  console.log("opaque, with delta, after set", e)
  expect(e~getChangedFieldKeys!).toEqual(['i'])
  expect(e.f).toEqual([5])


test! 'rawSet', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f

  e = create(E)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)

  e~rawSet('f', 1)
  expect(e.f).toBe(1)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)
  console.log(e)

  expect(e.g).toBe(undefined)
  e~rawSet('g', 2)
  console.log('after rawSet', e)
  expect(e.g).toBe(2)
  expect(e~isDelta!).toBe(true)
  expect(e~hasChanges!).toBe(false)

test! 'init', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f = 1

  debugger
  e = create(E)
  expect(e.f).toBe(1)
  console.log("init", e)

test! 'subentity', ->
  @entity({name: "E"}) class E extends Entity:
    @field() e

  @entity({name: "F"}) class F extends Entity:
    @field(E) subE

  f = create(F)
  f.subE = create(E)
  f.subE.e = 1

  expect(f.subE.e).toBe(1)
  expect(f~toPlainObject!).toEqual({ subE: { e: 1 }})

test! 'subentity init', ->
  @entity({ name: "E"}) class E extends Entity:
    @field() e = 1

  @entity({name: "F"}) class F extends Entity:
    @field(E) subE = {}

  f = create(F)

  expect(f.subE.e).toBe(1)
  expect(f~toPlainObject!).toEqual({ subE: { e: 1 }})
