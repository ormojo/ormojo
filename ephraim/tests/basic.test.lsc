import { entity, Entity, field, augment, toPlainObject, createMemory as create, setFieldType, isDelta } from '@ormojo/ephraim'

test! 'basic', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f

  debugger
  e = create(E)
  e.f = 1
  expect(e.f).toBe(1)
  expect(e~isDelta!).toBe(false)
  console.log(e)
  console.log(Object.getPrototypeOf(e))

test! 'static', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f = 1

    static staticMethod() -> 1

  expect(E.staticMethod()).toBe(1)

test! 'init', ->
  @entity({name: "E"}) class E extends Entity:
    @field() f = 1
    @field() g = -> "functional initializer"

  debugger
  e = create(E)
  console.log("init", e~toPlainObject!)
  expect(e.f).toBe(1)
  expect(e.g).toBe("functional initializer")

test! 'init via constructor', ->
  @entity({name: "E"}) class E extends Entity:
    @field() e

    constructor() ->
      this.e = 1

  @entity({name: "F"}) class F extends E:
    @field() f

    constructor() ->
      this.f = 2

    autoBound() => this.f

  debugger
  e = create(F)
  console.log("init via constructor", e~toPlainObject!)
  expect(e.e).toBe(1)
  expect(e.f).toBe(2)
  bound = e.autoBound
  expect(bound()).toBe(2)

test! 'subentity', ->
  @entity({name: "E"}) class E extends Entity:
    @field() e = undefined

  @entity({name: "F"}) class F extends Entity:
    @field(E) subE = undefined
    @field(E) subE2 = null

  f = create(F)
  expect(f.subE).toBe(undefined)
  expect(f.subE2).toBe(null)
  f.subE = create(E)
  f.subE.e = 1

  expect(f.subE.e).toBe(1)
  expect(f~toPlainObject!).toEqual({ subE: { e: 1 }, subE2: null })

test! 'subentity init', ->
  @entity({name: "E"}) class E extends Entity:
    @field() e = 1

  @entity({name: "F"}) class F extends Entity:
    @field(E) subE = {}

  f = create(F)

  expect(f.subE.e).toBe(1)
  expect(f~toPlainObject!).toEqual({ subE: { e: 1 }})

test! 'circular', ->
  @entity({name: "Parent"}) class Parent extends Entity:
    @field() child

  @entity({name: "Child"}) class Child extends Entity:
    @field(Parent) parent
    @field() data

  Parent~augment({ child: { type: Child }})

  debugger

  p = create(Parent)
  p.child = create(Child)
  p.child.parent = p
  p.child.data = 123

  console.log(p~toPlainObject!)
  expect(p.child.parent).toBe(p)
  expect(p.child.data).toBe(123)
  expect(p.child.parent.child).toBe(p.child)
  debugger

test! 'circular 2', ->
  @entity({name: "Parent"}) class Parent extends Entity:
    @field() child

  @entity({name: "Child"}) class Child extends Entity:
    @field(Parent) parent
    @field() data

  Parent~setFieldType('child', Child)

  debugger

  p = create(Parent)
  p.child = create(Child)
  p.child.parent = p
  p.child.data = 123

  console.log(p~toPlainObject!)
  expect(p.child.parent).toBe(p)
  expect(p.child.data).toBe(123)
  expect(p.child.parent.child).toBe(p.child)
  debugger
