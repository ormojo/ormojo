import { EntityType, PrimitiveType, ListType, typeFrom } from '../type'

import { transformEntityType } from './entity/transformEntityType'
import { transformListType } from './list/transformListType'

memoryTypeSymbol = Symbol.for("ephraim.transformedMemoryType")
memoryDeltaTypeSymbol = Symbol.for("ephraim.transformedMemoryDeltaType")
memoryObservableTypeSymbol = Symbol.for("ephraim.transformedMemoryObservableType")
memoryObservableDeltaTypeSymbol = Symbol.for("ephraim.transformedMemoryObservableDeltaType")

symbolForTransformProperties(isObservable, isDelta) ->
  if (not isObservable) and (not isDelta):
    ['memory', memoryTypeSymbol]
  elif isObservable and (not isDelta):
    ['memoryObservable', memoryObservableTypeSymbol]
  elif (not isObservable) and isDelta:
    ['memoryDelta', memoryDeltaTypeSymbol]
  else:
    ['memoryObservableDelta', memoryObservableDeltaTypeSymbol]

export transformType(T, isObservable, isDelta) ->
  now T = typeFrom(T)
  [transformedTypeQualifier, transformedTypeSymbol] = symbolForTransformProperties(isObservable, isDelta)
  if T[transformedTypeSymbol]: return T[transformedTypeSymbol]

  if T instanceof PrimitiveType:
    throw new Error("Cannot convert primitive types")
  elif T instanceof EntityType:
    transformEntityType(T, transformedTypeSymbol, transformedTypeQualifier, isObservable, isDelta)
  elif T instanceof ListType:
    transformListType(T, transformedTypeSymbol, transformedTypeQualifier, isObservable, isDelta)
  else:
    throw new Error(`Memory.transformType: unsupported type '${T.name}'`)
