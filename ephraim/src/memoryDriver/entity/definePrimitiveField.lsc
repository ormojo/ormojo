import { deltaSymbol } from '../../delta'
import { dataSymbol } from '../../fields'
import { typeCheckAssignment } from '../../util'
import { observedFieldsSymbol } from '../../observe'
import { any } from '../../primitiveTypes'

createGetterMethod(proto, type, key, isDelta) ->
  if isDelta:
    () ->
      r = this[deltaSymbol]?[key]
      if r == undefined: this[dataSymbol]?[key] else: r
  else:
    () -> this[dataSymbol]?[key]

createDeltaSetterMethod(proto, type, key) ->
  // TODO: special handling for id
  // id is nullable but reassigning it fails if not null
  (val): void ->
    let delta = this[deltaSymbol]
    let curVal = delta?[key]
    if curVal == undefined: now curVal = this[dataSymbol]?[key]
    if curVal == val: return

    if type != any: typeCheckAssignment(type, key, val)

    if not delta: this[deltaSymbol] = now delta = {}
    delta[key] = val

    observedFields = this[observedFieldsSymbol]
    if observedFields:
      observedFields[key]?.next(this)
      observedFields._all_?.next({entity: this, key})

createNonDeltaSetterMethod(proto, type, key) ->
  // TODO: special handling for id
  // id is nullable but reassigning it fails if not null
  (val): void ->
    if this[dataSymbol][key] == val: return
    if type != any: typeCheckAssignment(type, key, val)
    this[dataSymbol][key] = val

    observedFields = this[observedFieldsSymbol]
    if observedFields:
      observedFields[key]?.next(this)
      observedFields._all_?.next({entity: this, key})

createSetterMethod(proto, type, key, isDelta) ->
  if isDelta:
    createDeltaSetterMethod(proto, type, key)
  else:
    createNonDeltaSetterMethod(proto, type, key)

export definePrimitiveField(proto, type, key, spec, isDelta) ->
  Object.defineProperty(proto, key, {
    configurable: true
    enumerable: true
    get: createGetterMethod(proto, type, key, isDelta)
    set: createSetterMethod(proto, type, key, isDelta)
  })
