import { PrimitiveType, typeSymbol } from './type'
import { singleton } from './singleton'
import isEqual from 'lodash.isequal'

export any = singleton("any", ->
  const any = new PrimitiveType("any")
  any.validate = -> true
  any
)

export nil = singleton("nil", ->
  const nil = new PrimitiveType("nil")
  nil.validate = (x) -> x~looseEq(null)
  nil
)

export number = singleton("number", ->
  const number = new PrimitiveType("number")
  number.validate = (x) -> x~looseEq(null) or typeof x == "number"
  number
)

export string = singleton("string", ->
  const string = new PrimitiveType("string")
  string.validate = (x) -> x~looseEq(null) or typeof x == "string"
  string
)

export text = singleton("text", ->
  const text = new PrimitiveType("text")
  text.validate = (x) -> x~looseEq(null) or typeof x == "string"
  text
)

export boolean = singleton("boolean", ->
  const boolean = new PrimitiveType("boolean")
  boolean.validate = (x) -> x~looseEq(null) or typeof x == "boolean"
  boolean
)

// TODO: improve this
export integer = singleton("integer", ->
  const integer = new PrimitiveType("integer")
  integer.validate = (x) -> x~looseEq(null) or typeof x == "number"
  integer
)

// TODO: improve this
export date = singleton("date", ->
  const date = new PrimitiveType("date")
  date.validate = (x) -> x~looseEq(null) or (x instanceof Date)
  date.eq = (a, b) -> a.getTime() == b.getTime()
  date
)

export object = singleton("object", ->
  const object = new PrimitiveType("object")
  object.validate = (x) ->
    x~looseEq(null)
    or (
      typeof x == "object" and
      (not Array.isArray(x))
    )
  object.eq = isEqual
  object
)

export array = singleton("array", ->
  const array = new PrimitiveType("array")
  array.validate = (x) ->
    x~looseEq(null)
    or (
      typeof x != "function" and
      x.length >= 0
    )
  array.eq = isEqual
  array
)

// anything that could be serialized as json, opaque
// TODO: improve this, should recurse to see if we could jsonify it
export json = singleton("json", ->
  const json = new PrimitiveType("json")
  json.validate = (x) ->
    if x~looseEq(null): return true
    t = typeof x
    (
      t == "number"
      or t == "string"
      or t == "boolean"
      or t == "object"
      or Array.isArray(x)
    )
  json.eq = isEqual
  json
)

// typeOf helper
export typeOf(x) ->
  if x~looseEq(null): return nil

  // prims
  t = typeof x
  if t == "number": return number
  elif t == "string": return string
  elif t == "boolean": return boolean
  if Array.isArray(x): return array

  // complexes
  if x instanceof Date: return date
  if x[typeSymbol]: return x[typeSymbol]
  constr = x.constructor
  if constr and constr[typeSymbol]:
    constr
  else:
    object
