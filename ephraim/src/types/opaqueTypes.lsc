import { OpaqueType } from './type'
import { singleton } from '../singleton'
import isEqual from 'lodash.isequal'
import cloneDeep from 'lodash.clonedeep'

export date = singleton("date", ->
  const date = new OpaqueType("date")
  date.validate = (x) -> x~looseEq(null) or (x instanceof Date)
  date.toJavaScriptDate = (x) -> x
  date.eq = (a, b) -> a?.getTime() == b?.getTime()
  date.clone = (x) -> if x: new Date(x.getTime())
  date.stringify = (x) -> if x: x.toISOString() else: null
  date.assign = (x) ->
    if x instanceof Date:
      new Date(x.getTime())
    elif typeof(x) == 'string':
      new Date(x)
  date
)

export object = singleton("object", ->
  const object = new OpaqueType("object")
  object.validate = (x) ->
    x~looseEq(null)
    or (
      typeof x == "object" and
      (not Array.isArray(x))
    )
  object.eq = isEqual
  object.clone = cloneDeep
  object.assign = cloneDeep
  object.stringify = (x) -> if x~looseNotEq(null): JSON.stringify(x) else: x
  object
)

export array = singleton("array", ->
  const array = new OpaqueType("array")
  array.validate = (x) ->
    x~looseEq(null)
    or (
      typeof x != "function" and
      x.length >= 0
    )
  array.eq = isEqual
  array.clone = cloneDeep
  array.assign = cloneDeep
  array.stringify = (x) -> if x~looseNotEq(null): JSON.stringify(x) else: x
  array
)

// anything that could be serialized as json, opaque
// TODO: improve this, should recurse to see if we could jsonify it
export json = singleton("json", ->
  const json = new OpaqueType("json")
  json.validate = (x) ->
    if x~looseEq(null): return true
    t = typeof x
    (
      t == "number"
      or t == "string"
      or t == "boolean"
      or t == "object"
      or Array.isArray(x)
    )
  json.eq = isEqual
  json.clone = cloneDeep
  json.assign = cloneDeep
  json.stringify = (x) -> if x~looseNotEq(null): JSON.stringify(x) else: x
  json
)
