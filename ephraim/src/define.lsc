// Helpers for defining types
import { typeFrom, isType, EntityType, setType } from './type'
import { any } from './primitiveTypes'
import { fieldsSymbol } from './fields'

// Associate a prototype with an Ephraim EntityType
export bootstrapPrototype(proto, typeClass, parentType): void ->
  if not proto.hasOwnProperty(fieldsSymbol):
    // Inherit fields from parent by duplicating and assigning
    // to own fields.
    nextFields = Object.assign({}, proto[fieldsSymbol])
    proto[fieldsSymbol] = nextFields

    // Figure out if this is going to extend something
    extendsProto = Object.getPrototypeOf(proto)
    extendsType = if extendsProto?.constructor: typeFrom(extendsProto.constructor)

    // Create EntityType and associate it with the constructor
    T = new typeClass(parentType)
    T.fields = nextFields
    T.name = proto.constructor.name
    T.entityPrototype = proto
    T.extendsType = extendsType
    T.entitySpec = Object.assign({}, extendsType?.entitySpec)
    proto.constructor~setType(T)

normalizeFieldSpec(spec) ->
  if not spec: return { type: any }
  if spec~isType!: return { type: typeFrom(spec) }
  if typeof(spec) != "object":
    throw new Error("Field specification must be an object. (Did you forget () after a decorator?)")
  spec.type = typeFrom(spec.type)
  if not spec.type:
    throw new Error("Field specification must have a `type` key which is an ephraim type.")

  spec

// @field decorator
export field(spec) ->
  now spec = normalizeFieldSpec(spec)

  (proto, key, descriptor) ->
    // Key may not contain dot or begin with underscore
    if ( /\./.test(key) or /^_/.test(key) ):
      throw new Error(`Field '${key}' may not begin with '_' or contain '.'`)

    bootstrapPrototype(proto, EntityType)
    T = typeFrom(proto.constructor)
    spec.initializer = descriptor.initializer
    T.defineField(key, spec)
    {
      configurable: true, enumerable: true
      get: -> undefined
      set: -> throw new Error("setting abstract entity property")
    }

// @extendField decorator
export extendField(spec) ->
  (proto, key, descriptor) ->
    bootstrapPrototype(proto, EntityType)
    T = typeFrom(proto.constructor)
    lastSpec = T.fields[key]
    if not lastSpec:
      throw new Error(`@extendField() must extend an existing field.`)
    nextSpec = normalizeFieldSpec(Object.assign({}, lastSpec, spec))
    if descriptor.initializer: nextSpec.initializer = descriptor.initializer
    T.defineField(key, nextSpec)
    {
      configurable: true, enumerable: true
      get: -> undefined
      set: -> throw new Error("setting abstract entity property")
    }

normalizeEntitySpec(spec) ->
  if spec == undefined: now spec = {}
  if typeof(spec) != "object":
    throw new Error("Entity specification must be an object. (Did you forget () after a decorator?)")
  spec

// @entity decorator
export entity(spec) ->
  now spec = normalizeEntitySpec(spec)

  (constructor) ->
    proto = constructor.prototype
    bootstrapPrototype(proto, EntityType)
    T = typeFrom(proto.constructor)
    Object.assign(T.entitySpec, spec)

    throwOnlyConstructor = () ->
      throw new Error("cannot construct entity without a driver")

    T.setEntityConstructor(throwOnlyConstructor)

    throwOnlyConstructor

// Augment specifications for fields
export augment(T, spec): void ->
  now T = typeFrom(T)
  for key k, val v in spec:
    if T.fields[k]:
      nextSpec = Object.assign({}, T.fields[k], v)
      normalizeFieldSpec(nextSpec)
      T.defineField(k, nextSpec)
