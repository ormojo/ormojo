import * as primitiveTypes from './types/primitiveTypes'
import * as opaqueTypes from './types/opaqueTypes'

types = Object.assign({}, primitiveTypes, opaqueTypes)
export { types }

export { typeOf } from './types/typeOf'

export {
  Type, PrimitiveType, OpaqueType, ComplexType,
  typeFrom, isType, setType, isa, isKindOf, underlyingTypeSymbol
  isPrimitiveType, underlyingTypeOfType, isOpaqueType
} from './types/type'

export {
  EntityType
} from './types/entityType'

export {
  ListType, listOf
} from './types/listType'

export {
  MapType, mapOf
} from './types/mapType'

export {
  field, entity, Entity, augment, augmentField, setFieldType
} from './define'

export {
  declaredFields, declaredFieldKeys, flexFieldKeys, fieldKeys, forEachField
  dataSymbol, hasDeclaredField, rawSet, primitiveFields, primitiveFieldKeys
  opaqueFields, opaqueFieldKeys
} from './fields'

export {
  deltaSymbol, isDelta, clearDelta, fieldHasChanged, getChangedFieldKeys, hasChanges, forEachChangedField, getPreviousValue, setPreviousValue
} from './delta'

export {
  observe, observedFieldsSymbol, observableGhostSymbol, getObservableForField
} from './observe'

export {
  typeCheckAssignment, toPlainObject, assignPlainObject, hydratePlainObject
} from './util'

export {
  singleton
} from './singleton'

export {
  transformType as transformMemoryType,
  create as createMemory,
  createDelta as createMemoryDelta
} from './memoryDriver'
