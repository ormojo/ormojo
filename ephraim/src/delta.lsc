import { fieldsSymbol } from './fields'

export deltaSymbol = Symbol.for("ephraim.delta")

export clearDeltaSymbol = Symbol.for("ephraim.clearDelta")
export fieldHasChangedSymbol = Symbol.for("ephraim.fieldHasChanged")
export getChangedFieldKeysSymbol = Symbol.for("ephraim.getChangedFieldKeys")
export hasChangesSymbol = Symbol.for("ephraim.hasChanges")
export getPreviousValueSymbol = Symbol.for("ephraim.getPreviousValue")
export setPreviousValueSymbol = Symbol.for("ephraim.setPreviousValue")

export isDelta(entity): boolean ->
  entity[clearDeltaSymbol]~looseNotEq(null)

export clearDelta(entity): void ->
  entity[clearDeltaSymbol]()

export fieldHasChanged(entity, field): boolean ->
  entity[fieldHasChangedSymbol](field)

export getChangedFieldKeys(entity): Array<string> ->
  entity[getChangedFieldKeysSymbol]()

export hasChanges(entity): boolean ->
  entity[hasChangesSymbol]()

export getPreviousValue(entity, fieldName) ->
  entity[getPreviousValueSymbol](fieldName)

export setPreviousValue(entity, fieldName, val): void ->
  entity[setPreviousValueSymbol](fieldName, val)

// Iterate over all field keys and values, flex and declared
export forEachChangedField(ent, f): void ->
  // Declared fields
  fields = ent[fieldsSymbol]
  for elem k in ent[getChangedFieldKeysSymbol]():
    f(k, ent[k], fields[k])

  // Flex fields
  for elem k in Object.keys(ent):
    if k.charCodeAt(0) != 95:
      v = ent[k]
      if typeof(v) != "function":
        f(k, v)
