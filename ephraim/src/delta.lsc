import { typeOfPrototypeSymbol } from './type'
import { fieldsSymbol, dataSymbol } from './fields'

export deltaSymbol = Symbol.for("ephraim.delta")
export isDeltaSymbol = Symbol.for("ephraim.isDelta")

export isDelta(entity): boolean ->
  entity[isDeltaSymbol] == true

export clearDelta(entity): void ->
  entity[typeOfPrototypeSymbol].clearDelta(entity)

export flushDelta(entity): void ->
  entity[typeOfPrototypeSymbol].flushDelta(entity)

export fieldHasChanged(entity, field): boolean ->
  entity[typeOfPrototypeSymbol].fieldHasChanged(entity, field)

export getChangedFieldKeys(entity): Array<string> ->
  entity[typeOfPrototypeSymbol].getChangedFields(entity)

export hasChanges(entity): boolean ->
  entity[typeOfPrototypeSymbol].hasChanges(entity)

export getPreviousValue(entity, fieldName) ->
  entity[dataSymbol][fieldName]

// Set underlying data value for a delta entity
export setDataValue(entity, fieldName, fieldValue) ->
  entity[dataSymbol][fieldName] = fieldValue

// Iterate over all field keys and values, flex and declared
export forEachChangedField(ent, f): void ->
  // Declared fields
  fields = ent[fieldsSymbol]
  for elem k in ent[typeOfPrototypeSymbol].getChangedFields(ent):
    f(k, ent[k], fields[k])

  // Flex fields
  for elem k in Object.keys(ent):
    if k.charCodeAt(0) != 95:
      v = ent[k]
      if typeof(v) != "function":
        f(k, v)
