import Instance from './Instance'
import isPrimitive from 'nanotools/lib/isPrimitive'
import createBehaviorSubject from 'observable-utils/lib/createBehaviorSubject'
import defineObservableSymbol from 'observable-utils/lib/defineObservableSymbol'

// Instance class for third-party `BoundModel`s that provides default implementations
// of essential functionality.
export default class BoundInstance extends Instance:
  // @private
  constructor(boundModel, dataValues = {}, metadata) ->
    super(boundModel)
    this.dataValues = dataValues
    this.setMetadata(metadata)

  // @see Instance//getDataValue
  getDataValue(key) ->
    // _nextDataValues holds optimistic updates to the instance. Query it first; fallback to dataValues.
    if this._nextDataValues and (key in this._nextDataValues):
      this._nextDataValues[key]
    else:
      this.dataValues[key]

  // @see Instance//setDataValue
  setDataValue(key, value) ->
    originalValue = this.dataValues[key]
    // If value is different or not comparable...
    if not isPrimitive(value) or (value != originalValue):
      // Create diff cache if needed...
      if not this._nextDataValues: this._nextDataValues = Object.create(null)
      // Add key to diff cache
      this._nextDataValues[key] = value
      // Notify wasUpdated
      this._wasUpdated()
    undefined

  setMetadata(md) ->
    if md:
      Object.assign(this, md)
      this._wasUpdated()

  // Notify that data values are in sync with the most recent database call.
  _clearChanges() ->
    delete this.isNewRecord
    delete this._nextDataValues

  // Get raw data values as an immutable JS object. This represents the user's
  // DESIRED FUTURE STATE of the object, for persistence to the store.
  _getDataValues() ->
    if this._nextDataValues:
      // Flatten dataValues together with optimistic updates.
      Object.assign({}, this.dataValues, this._nextDataValues)
    else:
      this.dataValues

  // Set raw data values from a JS object.
  // @private
  _setDataValues(dataValues) ->
    this.dataValues = dataValues
    this._wasUpdated()

  // Merge raw data values from a JS object.
  // @private
  _mergeDataValues(nextDataValues) ->
    Object.assign(this.dataValues, nextDataValues)
    this._wasUpdated()

  // Invoked when this object was updated.
  _wasUpdated() ->
    if this._observable: this._observable.next(this)

  // @see Instance//get
  get(key) ->
    // Some libraries call this on the Prototype; early out in that case.
    ////// istanbul ignore if //////
    if not this.boundModel: return
    if key != undefined:
      // Get value for the given prop.
      if (key in this.boundModel.instanceProps):
        getter = this.boundModel.getters[key]
        if getter: getter.call(this, key) else: this.getDataValue(key)
    else:
      // Get all values.
      ({ for key k in this.boundModel.instanceProps: (k, this.get(k)) })

  // @see Instance//set
  set(key, value) ->
    // Some libraries call this on the Prototype; early out in that case.
    ////// istanbul ignore if //////
    if not this.boundModel: return
    if (value != undefined):
      // Run single setter, if exists.
      if key and (key in this.boundModel.instanceProps):
        setter = this.boundModel.setters[key]
        if setter: setter.call(this, key, value) else: this.setDataValue(key, value)
    else:
      // Run setters for each key.
      for key k, val v in key:
        if k in this.boundModel.instanceProps:
          this.set(k, v)

  // @see Instance//changed
  changed(key) ->
    if key != undefined:
      (this._nextDataValues and (key in this._nextDataValues))
    else:
      if not this._nextDataValues: return false
      //changes = (key for key of @dataValues when (key of @_nextDataValues))
      changes = [for key k in this._nextDataValues: k]
      if changes.length > 0: changes else: false

  // @see Instance//save
  save() ->
    this.boundModel.save(this)

  // @see Instance//destroy
  destroy() ->
    this.boundModel.destroy(this)

// Observability for BoundInstances
defineObservableSymbol(BoundInstance.prototype, ->
  if not this._observable:
    this._observable = createBehaviorSubject()
    this._observable.next(this)

  this._observable
)
