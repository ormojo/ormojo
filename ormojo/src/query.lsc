import { find, findAll } from './util'

//
// Object representing a declarative request for particular information from a store
//
export class Query {
  constructor(backend) ->
    this.backend = backend

  ////// istanbul ignore next //////

  // Determine if this query is equal to another query.
  // @param otherQuery [Query] The query to test against.
  // eslint-disable-next-line no-unused-vars
  isEqual(otherQuery) -> false

  ////// istanbul ignore next //////

  // Determine if this query is a narrowing of another query.
  // A narrowing is a query that would have a set of results that is a subset of
  // the other query's results, had they been run at the same time.
  // eslint-disable-next-line no-unused-vars
  isNarrowingOf(otherQuery) -> false

  ////// istanbul ignore next //////

  // Resume this query from the given Cursor.
  // eslint-disable-next-line no-unused-vars
  resumeFrom(cursor) -> this

  ////// istanbul ignore next //////

  // Identify specific instances to be retrieved by id or primary key.
  byId(id) ->
    if Array.isArray(id):
      this.setLimit(id.length)
      this.ids = id
    else:
      this.setLimit(1)
      this.ids = [id]
    this

  ////// istanbul ignore next //////

  // Request the backend to limit the number of results it returns.
  setLimit(limit) ->
    this.limit = limit
    this

  // Set ephraim type of this query
  setType(T) ->
    this.ephraimType =T
    this

  // Find one
  find() ->
    find(this.backend, this)

  findAll() ->
    findAll(this.backend, this)
}

// Collection of results from a query that may return multiple results.
// @abstract
export class ResultSet {
  constructor(backend, results) ->
    this.backend = backend
    this.results = results

  ////// istanbul ignore next //////

  // Determine if this result set is empty.
  //
  // @return [Boolean] `true` if empty.
  isEmpty() -> (this.getResultCount() == 0)

  ////// istanbul ignore next //////

  // Retrieve the number of results in this set.
  //
  // @return [Number] The count of results.
  getResultCount() ->
    if this.results: this.results.length else: 0

  ////// istanbul ignore next //////

  // Get the total number of results from the query that produced this `ResultSet`,
  // including results in future pages.
  // Not possible on all backends.
  //
  // @abstract
  // @return [Number] The total number of results.
  getTotalResultCount() ->
    throw new Error('`getTotalResultCount` called on abstract ResultSet')

  ////// istanbul ignore next //////

  // Retrieve the array of results in this set.
  //
  // @return [Array<Instance>] The collection of results.
  getResults() -> this.results or []

  // Return an array of results that can be mutated. May throw if
  // the ResultSet is immutable.
  getMutableResults() ->
    if not this.results: this.results = []
    this.results

  replaceResults(results) ->
    this.results = results
    this

  getMetadata() -> undefined

  ////// istanbul ignore next //////

  // Retrieve a cursor representing this set, which can be used to continue a paginated
  // query.
  //
  // @abstract
  // @return [Cursor] A cursor that can be used to get the next ResultSet. An undefined return indicates no further results are available.
  getCursor() -> this.cursor

  ////// istanbul ignore next //////

  // Determine if the query that generated this `ResultSet` has more results beyond what
  // are available in this set.
  //
  // @return [Boolean] `true` if more results are available.
  hasMore() -> this.getCursor()

  // Retrieve the next page of results.
  nextPage() -/>
    cursor = this.getCursor()
    if not cursor: return null
    query = this.backend.createQuery()
    query.resumeFrom(cursor)
    query.findAll()

} // class ResultSet

// Object representing a pagination of results returned from a backend.
export class Cursor {
  ////// istanbul ignore next //////

  // Get the total number of results for the query that made this cursor.
  //
  // @abstract
  // @return [Number] The total results.
  getTotalResultCount(): number -> 0

  ////// istanbul ignore next //////

  // Get the remaining results not yet fetched for the query that made this Cursor.
  //
  // @Abstract
  // @return [Number] The remaining results.
  getRemainingResultCount(): number -> 0

  // Determine if more results are available.
  hasMore(): boolean ->
    this.getRemainingResultCount() != 0
}
