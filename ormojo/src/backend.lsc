import type {Type, Entity} from '@ormojo/ephraim'
import { Query, ResultSet } from './query'

// Backend
export class Backend {

  //
  // Perform cleanup work associated with terminating the application
  // for this backend.
  //
  shutdown(): Promise<undefined> ->
    Promise.resolve()

  //
  // Bind an Ephraim entity type to this backend.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  bind(T, opts): void -> return

  //
  // Find an entity of a given type by ID.
  //
  // ids may be a single string or number value, or an array.
  // - If Ids is a single value, resolves to either an Entity or undefined
  // depending as whether the object could be found.
  // - If Ids is an array, resolves to an array of equal length consisting of
  // Entities and undefined, in positions corresponding to the ids array,
  // depending as whether the corresponding object could be found.
  // - If any id is `null` or `undefined`, the corresponding result entry
  // will always be `undefined`.
  //
  findById(T: Type, id, opts): Promise<Entity | undefined | Array<Entity | undefined>> ->
    q = this.createQuery().setType(T).byId(id)
    if Array.isArray(id):
      this.find(q, opts).then! resultSet -> resultSet.getResults!
    else:
      this.find(q, opts).then! resultSet -> (resultSet.getResults!)[0]

  //
  // Generate an empty Query appropriate to this backend.
  //
  createQuery(): Query -> null

  //
  // Find entities matching a backend-specific Query.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  find(query: Query, opts): Promise<ResultSet> -> null

  //
  // Create an entity of the bound type suitable for this backend,
  // persisting it to the database if data is provided.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  create(T: Type, data, opts): Entity | Promise<Entity> -> null

  //
  // Persist instance(s), or changes thereto, to the underlying database.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  save(data: Entity | Array<Entity>, opts): Promise<Entity | Array<Entity>> ->
    null

  //
  // Destroy the given entity, persisting the destruction to the
  // backend.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  destroy(instance: Entity, opts): Promise<Entity> -> null

  //
  // Destroy an entity given an identified type and ID.
  //
  // eslint-disable-next-line @lightscript/no-unused-vars
  destroyById(T: Type, id, opts): Promise<bool> -> null

}

export normalizeLoggerObject(log) ->
  let defaultLogger = -> return
  if typeof(log) == "function": now defaultLogger = log
  if typeof(log) != "object": now log = {}
  for elem logger in ["trace", "debug", "info", "warn", "error", "fatal"]:
    if not log[logger]: log[logger] = defaultLogger
  log
