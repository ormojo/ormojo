'use @oigroup/lightscript with noEnforcedSubscriptIndentation'
import { save, destroy } from '@ormojo/ormojo'
import { toPlainObject, entity, field, types } from '@ormojo/ephraim'
import { createBackend } from '../backend'

@entity() class Widget:
  @field(types.integer) id
  @field(types.string) name = 'nameless'
  @field(types.integer) qty = 2
  @field(types.boolean) falseness = false
  @field(types.boolean) truthiness = true

let backend = null
beforeAll! ->
  now backend = createBackend()
  backend.bind(Widget, {
    table: 'Widget_crud'
    fields: {
      "id": { autoIncrement: true }
    }
  })
  mig = backend.createMigration()
  mig.prepare().then! ->
    mig.execute()
  .then! ->
    backend.rawQuery('DELETE FROM Widget_crud')

// afterAll! ->
//   backend.tables._dropAllTables()
//   .then! -> backend.shutdown!
//   .catch! (err) -> console.error(err)

afterAll! ->
  backend.shutdown!

describe('CRUD', ->
  it('should create, save, find by id', ->
    awidget = backend.create(Widget)
    awidget.name = "whosit"
    debugger
    backend.save(awidget)
    .then! (widg) ->
      console.log(widg~toPlainObject!)
      debugger
      backend.findById(Widget, widg.id)
    .then! (widg) ->
      console.log(widg~toPlainObject!)
      expect(widg~toPlainObject!).toEqual(awidget~toPlainObject!)
      backend.findById(Widget, [widg.id])
    .then! (widgs) ->
      console.log(widgs)
      expect(widgs[0]~toPlainObject!).toEqual(awidget~toPlainObject!)
  )

  it('should create, destroy by specific id', ->
    awidget = backend.create(Widget)
    awidget.name = '12345'
    debugger
    awidget.id = 12345

    backend.save(awidget)
    .then(->
      backend.findById(Widget, 12345)
    ).then((rst) ->
      console.log(rst~toPlainObject!)
      expect(rst.name).toBe('12345')
      backend.destroyById(Widget, 12345)
    ).then((rst) ->
      expect(rst).toBeTruthy()
      backend.findById(Widget, 12345)
    ).then((rst) ->
      expect(rst).toBe(undefined)
    )
  )

  it('shouldnt find documents that arent there', ->
    backend.findById(Widget, -1)
    .then((x) ->
      expect(x).toBe(undefined)
      backend.findById(Widget, [-2, -3])
    ).then((xs) ->
      expect(xs.length).toBe(2)
      expect(xs[0]).toBe(undefined)
      expect(xs[1]).toBe(undefined)
    )
  )

  it('should save, delete, not find', ->
    let id = null
    backend.create(Widget, {name: 'whatsit', qty: 1000000})
    .then((widg) ->
      debugger
      now id = widg.id
      backend.destroy(widg)
    ).then((widg) ->
      expect(widg._wasDeleted).toBe(true)
      backend.findById(Widget, id)
    ).then((x) ->
      expect(x).toBe(undefined)
    )
  )

  it('should CRUD', ->
    let id = null
    backend.create(Widget, {name: 'name1', qty: 1})
    .then((widg) ->
      expect(widg.name).toBe('name1')
      expect(widg.qty).toBe(1)
      backend.findById(Widget, widg.id)
    ).then((widg) ->
      expect(widg.name).toBe('name1')
      widg.name = 'name2'
      widg~save()
    ).then((widg) ->
      expect(widg.name).toBe('name2')
      now id = widg.id
      widg~destroy()
    ).then(->
      backend.findById(Widget, id)
    ).then((x) ->
      expect(x).toBe(undefined)
    )
  )

  it! 'should create/reuse', -/>
    widg <- backend.create(Widget, {})
    widg.name = 'renamed'
    <- widg~save!
)
