'use @oigroup/lightscript with noEnforcedSubscriptIndentation'
import { save, destroy, Timestamped } from '@ormojo/ormojo'
import { toPlainObject, entity, field, types, Entity } from '@ormojo/ephraim'
import { createBackend } from '../backend'

@entity({name: 'Widget', inherits: [Timestamped]}) class Widget extends Entity:
  @field(types.integer) id
  @field(types.string) name = 'nameless'
  @field(types.integer) qty = 2

let backend = null
beforeAll! ->
  now backend = createBackend()
  backend.bind(Widget, {
    table: 'Widget_timestamped'
    fields: {
      "id": { autoIncrement: true }
    }
  })
  mig = backend.createMigration()
  mig.prepare().then! ->
    mig.execute()
  .then! ->
    backend.rawQuery('DELETE FROM Widget_timestamped')

// afterAll! ->
//   backend.tables._dropAllTables()
//   .then! -> backend.shutdown!
//   .catch! (err) -> console.error(err)

afterAll! ->
  backend.shutdown!

describe('Timestamps', (): void ->
  it('should CRUD', ->
    let id, ts1, ts2
    let nowish = new Date()
    backend.create(Widget, {name: 'name1', qty: 1})
    .then((widg) ->
      expect(widg.name).toBe('name1')
      expect(widg.qty).toBe(1)
      console.log("Data on creation", widg~toPlainObject!)
      expect((widg.createdAt - nowish) < 10000)
      now ts1 = widg.updatedAt
      backend.findById(Widget, widg.id)
    ).then((widg) ->
      expect(widg.name).toBe('name1')
      widg.name = 'name2'
      widg~save()
    ).then((widg) ->
      console.log("Data on update", widg~toPlainObject!)
      expect(widg.name).toBe('name2')
      now ts2 = widg.updatedAt
      expect(ts1 < ts2).toBe(true)
      now id = widg.id
      widg~destroy()
    ).then(->
      backend.findById(Widget, id)
    ).then((x) ->
      expect(x).toBe(undefined)
    )
  )
)
