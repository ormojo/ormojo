'use @oigroup/lightscript with noEnforcedSubscriptIndentation'

import { create, save, findById, destroy, find } from '@ormojo/ormojo'
import { toPlainObject, entity, field, types, listOf, extendField, Entity } from '@ormojo/ephraim'
import { createBackend } from '../backend'

util = require('util')

let backend = null
beforeAll! ->
  now backend = createBackend()

afterAll! ->
  backend.tables._dropAllTables()
  .then! -> backend.shutdown!
  .catch! (err) -> console.error(err)

describe('alter table migration tests: ', (): void ->
  it('add modify drop column', ->
    @entity({name: 'Widget'}) class Widget extends Entity:
      @field(types.string) id
      @field(types.boolean) noMigrateBoolean
      @field(types.integer) willChangeType
      @field(types.integer) willDrop

    backend.bind(Widget, { table: 'Widget_alter' })
    mig = backend.createMigration()
    mig.prepare!
    .then! ->
      console.log("plan", util.inspect(mig.describe(), { depth: 10}))
      mig.execute!
    .then! ->
      @entity({name: 'Widget2'}) class Widget2 extends Entity:
        @field(types.string) id
        @field(types.boolean) noMigrateBoolean
        @field(types.string) willChangeType
        @field(types.string) willAdd

      console.log("Made Widget2")
      backend._clearInternalTableStructure!
      backend.bind(Widget2, { table: 'Widget_alter' })
      const mig = backend.createMigration()
      mig.prepare!
    .then! (mig) ->
      console.log("plan", util.inspect(mig.describe(), { depth: 10}))
      mig.execute!
  )

  @entity({name: 'Wodget'}) class Wodget extends Entity:
    @field(types.string) id
    @field(types.integer) f1
    @field(types.integer) f2
  it! 'add modify drop index', ->
    console.log("******** Create")
    backend.bind(Wodget, { table: 'Wodget_alter', indices: [{ columnNames: ['f1'] }] })
    backend.createMigration!.prepare!.then(mig ->
      console.log("ddl", mig._describeDdl())
      mig.execute!)
    .then! ->
      console.log("******** Alter")
      backend._clearInternalTableStructure!
      backend.bind(Wodget, { table: 'Wodget_alter', indices: [{ columnNames: ['f1'], unique: true }] })
      backend.createMigration!.prepare!.then(mig ->
        console.log("ddl", mig._describeDdl())
        mig.execute!)
    .then! ->
      console.log("******** Add/Drop")
      backend._clearInternalTableStructure!
      backend.bind(Wodget, { table: 'Wodget_alter', indices: [{ columnNames: ['f1', 'f2'], unique: true }] })
      backend.createMigration!.prepare!.then(mig ->
        console.log("ddl", mig._describeDdl())
        mig.execute!
      )
    .then! ->
      console.log("******** NOOP")
      backend._clearInternalTableStructure!
      backend.bind(Wodget, { table: 'Wodget_alter', indices: [{ columnNames: ['f1', 'f2'], unique: true }] })
      backend.createMigration!.prepare!
      .then(mig ->
        console.log("ddl", mig._describeDdl())
        mig
      )
      .then(mig -> mig.execute!)
)
