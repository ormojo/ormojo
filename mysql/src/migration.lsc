'use @oigroup/lightscript with noEnforcedSubscriptIndentation'

import { Migration, MigrationPart } from '@ormojo/ormojo'
import { MySQLTables } from './metadata/tables'
import { getTablesDiff } from './metadata/tableDiff'

class MySQLMigrationPart extends MigrationPart:
  constructor(diff) ->
    this.tableName = diff.target.name
    this.diff = diff
    this.ddl = [
      ...if diff.indexDropDDL: [diff.indexDropDDL]
      ...if diff.ddl: [diff.ddl]
    ]

  isActionNeeded() -> this.ddl.length > 0

  toJSON() -> {
    tableName: this.tableName
    actionNeeded: this.isActionNeeded()
    diff: this.diff
    ddl: this.ddl
  }

  execute({connection, backend}): void -/>
    if this.ddl.length == 0: return
    for elem ddlEntry in this.ddl:
      <- backend.rawQuery(ddlEntry, null, connection)

// Migration for a schema
export class MySQLMigration extends Migration:
  constructor(backend) ->
    super(backend)
    this.database = backend.database

  prepare() -/>
    // Diff current tables in database with target tables defined
    // on backend
    currentTables = new MySQLTables(this.backend, this.database)
    <- currentTables._enumerateTables()
    <- currentTables._getAllTableMetadata()
    { diffs } = getTablesDiff(this.backend.tables, currentTables)

    // Convert diff into a series of migration steps
    this.parts = [...for elem diff in diffs: [new MySQLMigrationPart(diff)]]

    // Flag as prepared and return
    this.prepared = true
    this

  execute(): void -/>
    backend = this.backend
    actionableParts = this.getActionableParts()
    if actionableParts.length == 0: return

    // Open connection
    connection <- backend.connectionManager.openConnection()
    context = {connection, backend}
    // Execute actionable parts
    for elem actionablePart in actionableParts:
      <- actionablePart.execute(context)
    // Close connection
    <- backend.connectionManager.closeConnection(connection)

  // Get existing table structure from database
  _enumerateExistingTables() -/>
    tables = new MySQLTables(this.backend, this.database)
    <- tables._enumerateTables()
    tables
