'use @oigroup/lightscript with noEnforcedSubscriptIndentation'

import { Migration } from '@ormojo/ormojo'
import { MySQLTables } from './metadata/tables'
import { getTablesDiff } from './metadata/tableDiff'

// Migration for a schema
export class MySQLMigration extends Migration:
  constructor(backend) ->
    super(backend)
    this.database = backend.database

  prepare(): Promise<MySQLMigration> ->
    this._prepareAlter!

  _prepareAlter() ->
    this.ddl = []
    this.currentTables = new MySQLTables(this.backend, this.database)
    this.currentTables._enumerateTables()
    .then! =>
      this.currentTables._getAllTableMetadata()
    .then! =>
      this.ddl = getTablesDiff(this.backend.tables, this.currentTables)
      if this.ddl.length == 0:
        this.backend.log.info("MySQLMigration: trivial migration")
      else:
        this.backend.log.trace("MySQLMigration: nontrivial migration", this.ddl)
      this

  _prepareCreate() ->
    this.ddl = []
    for elem tbl in this.backend.tables.getTableList():
      this.ddl.push(tbl._toCreateDDL!)
    Promise.resolve(this)

  getMigrationPlan() ->
    { sql: this.ddl }

  execute() ->
    backend = this.backend
    ddl = this.ddl

    continuation(n, backend, conn) ->
      if n >= ddl.length:
        backend.connectionManager.closeConnection(conn)
      else:
        backend.rawQuery(ddl[n], null, conn).then(-> continuation(n+1, backend, conn))

    backend.connectionManager.openConnection()
      .then! (conn) -> continuation(0, backend, conn)

  // Get existing table structure from database
  _enumerateExistingTables(): Promise<any> ->
    this.existingTables = new MySQLTables(this.backend, this.database)
    this.existingTables._enumerateTables()
