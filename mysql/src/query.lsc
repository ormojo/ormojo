import { Query, Cursor, ResultSet } from '@ormojo/ormojo'
import { escapeValue as q } from './util'

export Field(T, field) ->
  (query) ->
    query.backend._getTableForType(T)?.columnForField[field]?.fqcn

export Op(field, o, val) ->
  (query, clause): void ->
    col = if typeof(field) == 'function':
      field(query)
    else:
      query._table?.columnForField[field]?.fqcn
    if col:
      clause.push(`${col}${o}${q(val)}`)
    else:
      throw new Error(`MySQLQuery: could not find column for field '${field}'`)
    clause

export Eq(field, val) -> Op(field, '=', val)

export Not(arg) ->
  (query, clause): void ->
    clause.push(`NOT ${arg(query, clause)}`)

export Logical(op, ...args) ->
  (query, clause): void ->
    myClauses = []
    for elem arg in args: arg(query, myClauses)
    if myClauses.length == 1:
      clause.push(myClauses[0])
    elif myClauses.length > 1:
      andedClauses = myClauses.map(x -> `(${x})`).join(` ${op} `)
      clause.push(`(${andedClauses})`)

export And(...args) -> Logical("AND", ...args)
export Or(...args) -> Logical("OR", ...args)

export class MySQLQuery extends Query:
  constructor(backend) ->
    super(backend)

  setType(T) ->
    super.setType(T)
    tbl = this.backend._getTableForType(T)
    this._table = tbl
    this.fieldsClause = tbl.selectFieldsClause
    this.fromClause = tbl.quotedName
    this.readPattern = tbl.readPattern
    this

  setRelationship(R) ->
    this._table = R.masterTable
    this.fieldsClause = R.selectFieldsClause
    this.fromClause = R.joinClause
    this.readPattern = R.readPattern
    this

  setQuery(other) ->
    Object.assign(this, other)

  resumeFrom(cursor) ->
    this.setQuery(cursor.query)
    this.offset = cursor.offset
    this.limit = cursor.limit
    this

  where(build) ->
    clause = []
    build(this, clause)
    if clause[0]:
      this.whereClause = clause[0]
    else:
      throw new Error('Invalid query builder')
    this

  orderBy(field, qualifier = 'ASC') ->
    col = this._table?.columnForField[field]?.quotedName
    if not col: throw new Error(`MySQLQuery.orderBy: no column for field '${field}'`)
    this.orderByClause = `ORDER BY ${col} ${qualifier}`
    this

  _getOffsetClause() ->
    if this.limit:
      if this.offset:
        `LIMIT ${this.limit} OFFSET ${this.offset}`
      else:
        `LIMIT ${this.limit}`
    else:
      ''

  _getOrderByClause() ->
    if this.orderByClause: this.orderByClause else: ''

  _getFieldsClause() ->
    if typeof(this.fieldsClause) == 'string':
      this.fieldsClause
    elif Array.isArray(this.fieldsClause):
      this.fieldsClause.join(',')
    else:
      // TODO: error here?
      ''

  _getFromClause() ->
    this.fromClause

  _getWhereClause() ->
    this.whereClause

  _getSQL() ->
    if this.sql:
      this.sql
    elif this.ids:
      ids = this.ids
      tbl = this._table
      if ids.length > 1:
        set = [...for elem id in ids: [q(id)]].join(',')
        `SELECT ${this._getFieldsClause()} FROM ${this._getFromClause()} WHERE ${tbl.pkColumnFqcn} IN (${set})`
      else:
        `SELECT ${this._getFieldsClause()} FROM ${this._getFromClause()} WHERE ${tbl.pkColumnFqcn}=${q(ids[0])}`
    else:
      `SELECT ${this._getFieldsClause()} FROM ${this._getFromClause()} WHERE ${this._getWhereClause()} ${this._getOrderByClause()} ${this._getOffsetClause()}`

export class MySQLCursor extends Cursor:
  constructor(query) ->
    super()
    this.query = query

  setFromOffset(offset, limit) ->
    this.offset = offset
    this.limit = limit
    this

export class MySQLResultSet extends ResultSet:
  constructor(backend, data) ->
    super(backend, data or [])

  setPagination(sourceQuery, count): void ->
    if count == undefined: now count = this.results.length
    // Clear cursor if no next page
    if count == 0 or count < sourceQuery.limit:
      this.cursor = null
      return
    nextOffset = (sourceQuery.offset or 0) + count
    nextLimit = sourceQuery.limit or count
    this.cursor = new MySQLCursor(sourceQuery).setFromOffset(nextOffset, nextLimit)

  getCursor() -> this.cursor

  nextPage() ->
    if this.cursor:
      qry = this.backend.createQuery().resumeFrom(this.cursor)
      this.backend.find(qry)
    else:
      Promise.resolve(new MySQLResultSet(this.backend))


