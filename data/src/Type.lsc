import { $TYPE, $PRIMITIVE_TYPE } from './symbols'

export class Type:
  static [$TYPE] = true

  // Check that this type inherits/extends another type
  static isKindOf(otherT): boolean ->
    otherT == this

  // Check that x is an instance of this type
  // eslint-disable-next-line no-unused-vars
  static validate(x): boolean ->
    false

  // Compare two objects of this type
  static eq(x, y): boolean -> x == y

  // Copy an object of this type
  static clone(x) -> x

export class Primitive extends Type:
  static [$PRIMITIVE_TYPE] = true

export class any extends Primitive:
  static validate(): boolean -> true

  static clone() ->
    throw new Error("cannot clone value of type `any`")

export class nil extends Primitive:
  static validate(x): boolean -> x~looseEq(null)

export class boolean extends Primitive:
  static validate(x): boolean ->
    x~looseEq(null) or typeof x == "boolean"

export class number extends Primitive:
  static validate(x): boolean ->
    x~looseEq(null) or typeof x == "number"

export class string extends Primitive:
  static validate(x): boolean ->
    x~looseEq(null) or typeof x == "string"

export class text extends Primitive:
  static validate(x): boolean ->
    x~looseEq(null) or typeof x == "string"

export class integer extends Primitive:
  static validate(x): boolean ->
    x~looseEq(null) or typeof x == "number"

export types = { any, nil, boolean, number, string, text, integer }

export class Opaque extends Type {}

export lazyModelType(t) -> t
