
export class Attribute extends Property:
  [$ATTRIBUTE] = true
  storageClass = SC_UNKNOWN

  setDef(def = {}): void ->
    this.isNullable = true
    super.setDef(def)
    this.initializer = def.defaultValue or def.default

  setKey(key): void ->
    super.setKey(key)
    if not this.isNullable:
      if this.initializer~looseEq(null):
        throw new Error(`Non-nullable field '${key}' must have a defaultValue.`)

  hasInitializer(): boolean -> this.initializer~looseNotEq(null)

  static isAttribute(x) -> !!x[$ATTRIBUTE]

export class PrimitiveAttribute extends Attribute:
  storageClass = SC_PRIMITIVE

export class RecordAttribute extends Attribute:
  storageClass = SC_REF

export class ListAttribute extends Attribute:
  [$LIST] = true

export attr(type, def) ->
  now type = normalizeType(type)
  a = if type.isModel():
    new RecordAttribute()
  elif type.isPrimitive():
    new PrimitiveAttribute()
  else:
    new Attribute()

  a.setType(type)
  a.setDef(def)
  a

export list(type, def) ->
  now type = normalizeType(type)
  a = new ListAttribute()
  if type.isModel():
    a.storageClass = SC_SHORT_LIST_REF
  else:
    a.storageClass = SC_SHORT_LIST_VALUE

  a.setType(type)
  a.setDef(def)
  a
