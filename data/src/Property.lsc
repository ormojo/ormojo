import { $PROPERTY, $ATTRIBUTE } from './symbols'
import { any, types, lazyModelType } from './Type'

// Invalid names for properties
illegalPropertyKeys = {
  'getModel': true
  'getProperties': true
  'getAttributes': true
  'get': true
  'set': true
  'save': true
  'destroy': true
}

normalizeType(t) ->
  if not t:
    any
  elif types[t]:
    types[t]
  elif typeof t == 'string':
    lazyModelType(t)
  else:
    t

export class Property:
  [$PROPERTY] = true
  constructor(def) ->
    Object.assign(this, def)

  static isProperty(x) ->
    (typeof x == 'object') and x[$PROPERTY]

  setKey(key): void ->
    if illegalPropertyKeys[key]:
      throw new Error(`Illegal attribute key '${key}'`)
    this.key = key

  configure(modelClass): void -> return

  isAttribute(): boolean -> !!this[$ATTRIBUTE]

export class Attribute extends Property:
  [$ATTRIBUTE] = true
  constructor(type, def) ->
    super(def)
    this.type = normalizeType(type)
    this.isNullable = true
    if def:
      this.initializer = def.defaultValue or def.default
      if def.isNullable~looseNotEq(null): this.isNullable = def.isNullable

  setKey(key): void ->
    super.setKey(key)
    if not this.isNullable:
      if this.initializer~looseEq(null):
        throw new Error(`Non-nullable field '${key}' must have a defaultValue.`)

  hasInitializer(): boolean -> this.initializer~looseNotEq(null)

  static isAttribute(x) -> !!x[$ATTRIBUTE]

export attr(type, def) ->
  new Attribute(type or any, def)
