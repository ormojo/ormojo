import {
  $PROPERTY, $ATTRIBUTE, $LIST, SC_REF, SC_UNKNOWN, SC_PRIMITIVE
  SC_SHORT_LIST_REF, SC_SHORT_LIST_VALUE
} from './symbols'
import { any, types, lazyModelType } from './Type'

// Invalid names for properties
illegalPropertyKeys = {
  'getModel': true
  'getProperties': true
  'getAttributes': true
  'get': true
  'set': true
  'save': true
  'destroy': true
}

normalizeType(t) ->
  if not t:
    any
  elif types[t]:
    types[t]
  elif typeof t == 'string':
    lazyModelType(t)
  else:
    t

export class Property:
  [$PROPERTY] = true

  static isProperty(x) ->
    (typeof x == 'object') and x[$PROPERTY]

  setType(type): void ->
    this.type = type

  setKey(key): void ->
    if illegalPropertyKeys[key]:
      throw new Error(`Illegal attribute key '${key}'`)
    this.key = key

  setDef(def): void ->
    Object.assign(this, def)

  setModel(model): void ->
    this.model = model

  isAttribute(): boolean -> !!this[$ATTRIBUTE]

  clone() ->
    x = new this.constructor()
    Object.assign(x, this)
    x

export class Attribute extends Property:
  [$ATTRIBUTE] = true
  storageClass = SC_UNKNOWN

  setDef(def = {}): void ->
    this.isNullable = true
    super.setDef(def)
    this.initializer = def.defaultValue or def.default

  setKey(key): void ->
    super.setKey(key)
    if not this.isNullable:
      if this.initializer~looseEq(null):
        throw new Error(`Non-nullable field '${key}' must have a defaultValue.`)

  hasInitializer(): boolean -> this.initializer~looseNotEq(null)

  static isAttribute(x) -> !!x[$ATTRIBUTE]

export class PrimitiveAttribute extends Attribute:
  storageClass = SC_PRIMITIVE

export class RecordAttribute extends Attribute:
  storageClass = SC_REF

export class ListAttribute extends Attribute:
  [$LIST] = true

export attr(type, def) ->
  now type = normalizeType(type)
  a = if type.isModel():
    new RecordAttribute()
  elif type.isPrimitive():
    new PrimitiveAttribute()
  else:
    new Attribute()

  a.setType(type)
  a.setDef(def)
  a

export list(type, def) ->
  now type = normalizeType(type)
  a = new ListAttribute()
  if type.isModel():
    a.storageClass = SC_SHORT_LIST_REF
  else:
    a.storageClass = SC_SHORT_LIST_VALUE

  a.setType(type)
  a.setDef(def)
  a
