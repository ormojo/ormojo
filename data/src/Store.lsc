import { $MODEL_TYPE, $TYPEOF } from './symbols'
import { assert } from './util'

// Where the models live
export class Store:
  // Map from model name to model
  models = {}

  // Internal bind method
  // eslint-disable-next-line no-unused-vars
  _bind(name, model, opts) ->
    throw new Error("Attempt to bind to abstract store")

  /**
  * Bind a model to this store.
  */
  // eslint-disable-next-line no-unused-vars
  bind(model, opts = {}): void ->
    assert(typeof model == "function" and model[$MODEL_TYPE], "Store.bind: expected a Model")

    name = opts.name or model.name
    BoundModel = this._bind(name, model, opts)
    // When inquring after the type of the bound model, the original
    // model should be returned
    BoundModel.prototype[$TYPEOF] = model
    this.models[name] = BoundModel

  /**
  * Synchronously create a new instance.
  */
  // eslint-disable-next-line no-unused-vars
  new(type) -> return
