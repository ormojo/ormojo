import { Model, attr, MemoryStore, _internals } from '..'

it! 'should work', ->
  debugger
  MyModel = Model.extend('MyModel', {
    name: attr('string')
  })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  k = MyStore.new('MyModel')
  k.name = "Alice"
  expect(k.name).toBe("Alice")

it! 'should observe primitive', ->
  debugger
  MyModel = Model.extend('MyModel', { name: attr('string') })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  k = MyStore.new('MyModel')
  k.name = "Alice"
  observations = []
  sub1 = k.observe("name").subscribe({
    next(x) ->
      console.log("next", x)
      observations.push(x.value)
  })
  expect(observations).toEqual(['Alice'])
  k.name = "Bob"
  expect(observations).toEqual(['Alice', 'Bob'])
  sub1.unsubscribe()

it! 'should mutate internal interest structure properly', ->
  debugger
  MyModel = Model.extend('MyModel', { name: attr('string') })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  k = MyStore.new('MyModel')
  k.name = "Alice"
  expect(k[_internals.symbols.$INTEREST]).toBe(undefined)
  sub1 = k.observe("name").subscribe({ next() -> return })
  expect(k[_internals.symbols.$INTEREST].name).toBeTruthy()
  sub1.unsubscribe()
  expect(k[_internals.symbols.$INTEREST]).toBe(undefined)

it! 'should default', ->
  debugger
  MyModel = Model.extend('MyModel', {
    name: attr('string', { defaultValue: 'Joe' })
    addr: attr('string', { defaultValue: -> '123 Drury Ln'})
  })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  k = MyStore.new('MyModel')
  console.log(k)
  expect(k.name).toBe('Joe')
  expect(k.addr).toBe('123 Drury Ln')

it! 'should default object', ->
  debugger
  MyModel = Model.extend('MyModel', {
    name: attr('string', { defaultValue: 'Joe' })
  })
  YourModel = Model.extend('YourModel', {
    myModel: attr('MyModel', { defaultValue: {} })
    addr: attr('string', { defaultValue: '123 Drury Ln' })
  })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  MyStore.bind(YourModel)
  k = MyStore.new('YourModel')
  console.log(k)
  expect(k.myModel.name).toBe('Joe')
  expect(k.addr).toBe('123 Drury Ln')

it! 'should allow type self-ref', ->
  debugger
  MyModel = Model.extend('MyModel', {
    recursive: attr('MyModel')
    name: attr('string', { defaultValue: 'Bob'})
  })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  k = MyStore.new('MyModel')
  console.log(k)
  expect(k.recursive).toBeFalsy()
  expect(k.name).toBe('Bob')

it! 'should allow type cycles', ->
  debugger
  MyModel = Model.extend('MyModel', {
    yourModel: attr('YourModel')
    name: attr('string', { defaultValue: 'Bob'})
  })
  YourModel = Model.extend('YourModel', {
    myModel: attr('MyModel')
    addr: attr('string', { defaultValue: '123 Drury Ln'})
  })
  MyStore = new MemoryStore()
  MyStore.bind(MyModel)
  MyStore.bind(YourModel)
  k = MyStore.new('MyModel')
  l = MyStore.new('YourModel')
  k.yourModel = l
  l.myModel = k
  console.log(k)
  expect(k.name).toBe('Bob')
  expect(k.yourModel.addr).toBe('123 Drury Ln')
