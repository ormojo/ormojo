import { createSubject, createBehaviorSubject, switchLatest, test } from '..'

describe! 'switch', (): void ->
  it! 'should work', ->
    subj1 = createSubject()
    subj2 = createSubject()
    subj3 = createSubject()
    outer = createSubject()

    switched = switchLatest(outer)

    test(switched, console.log.bind(console), [
      (x) -> x == 1
      (x) -> x == 2
      (x) -> x == 3
      'complete'
      'failure'
    ])

    outer.next(subj1)
    subj1.next(1)
    outer.next(subj2)
    subj2.next(2)
    outer.next(subj3)
    outer.complete()
    subj3.next(3)
    subj3.complete()

  it! 'should work with nullable observables', ->
    subj1 = createSubject()
    subj2 = createSubject()
    subj3 = createSubject()
    outer = createSubject()

    switched = switchLatest(outer)

    test(switched, console.log.bind(console), [
      (x) -> x == 1
      (x) -> x == 2
      (x) -> x == 3
      'complete'
      'failure'
    ])

    outer.next(subj1)
    subj1.next(1)
    outer.next(null)
    outer.next(subj2)
    subj2.next(2)
    outer.next(null)
    outer.next(subj3)
    outer.complete()
    subj3.next(3)
    subj3.complete()

  it! 'should work with BehaviorSubject', ->
    subj1 = createBehaviorSubject()
    subj1.next(1)
    subj2 = createBehaviorSubject()
    subj2.next(2)
    subj3 = createBehaviorSubject()
    subj3.next(3)
    outer = createSubject()

    switched = switchLatest(outer)

    test(switched, console.log.bind(console), [
      (x) -> x == 1
      (x) -> x == 2
      (x) -> x == 3
      'complete'
      'failure'
    ])

    outer.next(subj1)
    outer.next(subj2)
    outer.next(subj3)

  it! 'should manage subscriptions properly', ->
    changelog = []
    subj1 = createSubject({
      onObserversChanged: (obs, added, removed) ->
        changelog.push({subject: 1, added, removed, length: obs.length })
    })
    subj2 = createSubject({
      onObserversChanged: (obs, added, removed) ->
        changelog.push({subject: 2, added, removed, length: obs.length })
    })
    outer = createSubject()
    switched = switchLatest(outer)

    sub = switched.subscribe(-> return)
    outer.next(subj1)
    outer.next(subj2)
    sub.unsubscribe()

    // When first is pushed, we should subscribe to it.
    expect(changelog[0]).toMatchObject({
      subject: 1
      added: expect.anything()
      removed: null
      length: 1
    })
    // When second is pushed, we should unsub from first and sub to second
    expect(changelog[1]).toMatchObject({
      subject: 1
      added: null
      removed: expect.anything()
      length: 0
    })
    expect(changelog[2]).toMatchObject({
      subject: 2
      added: expect.anything()
      removed: null
      length: 1
    })
    // When we unsub from the switched observable, it should unsub from second
    expect(changelog[3]).toMatchObject({
      subject: 2
      added: null
      removed: expect.anything()
      length: 0
    })
