// Emits only when the priorObservable emits a value different from its last
// emission.
import { memoize } from './memoize'
import { filter } from './filter'
import { map } from './map'

strictEqual(a,b) -> a == b

export changed(priorObservable, equalityTest = strictEqual) ->
  memoize(priorObservable, 1)
    ~filter(
      (memory) -> (memory.length == 1) or (not equalityTest(memory[0], memory[1]))
    )
    ~map((memory) -> memory[0])
