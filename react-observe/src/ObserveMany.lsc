import { Observe } from './Observe'
import { combineLatest } from '@ormojo/fobs'

ignoredProps = {
  pure: true
  children: true
}

export class ObserveMany extends Observe:
  // Compare current state.source to incoming props to determine if the source
  // needs to be changed. Return true if same, false if different.
  static comparePropsToSource(nextProps, prevSource) ->
    // Check for changed or additional props
    for key k, val v in nextProps:
      if not ignoredProps[k]:
        if v != prevSource[k]: return false

    // CHeck for deleted props
    for key k in prevSource:
      if not nextProps[k]: return false

    true

  // Compare two state.source values to determine if the source has changed.
  // Return true if same, false if different
  static compareSourceToSource(nextSource, prevSource) ->
    nextState.source == prevState.source

  // Get the state.source value corresponding to the given props
  static getSourceFromProps(props) ->
    {...for key k, val v in props:
      if not ignoredProps[k]: {[k]: v}
    }

  // Get the ES7 Observable corresponding to the given state.source along
  // with its initial value, as an { observable, value } pair
  getObservableFromSource(source) ->
    combineLatest(source)
